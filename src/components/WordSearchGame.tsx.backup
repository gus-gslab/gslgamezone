import React, { useState, useEffect, useCallback, useRef } from 'react';
import {
  Trophy,
  Share2,
  Star,
  Target,
  Award,
  Zap,
  Clock,
  TrendingUp,
  ArrowLeft,
  X,
} from 'lucide-react';
import { useNavigate, useSearchParams } from 'react-router-dom';
import { motion, AnimatePresence } from 'framer-motion';
import toast from 'react-hot-toast';
import Confetti from 'react-confetti';
import { useWindowSize } from '../hooks/useWindowSize';
import { useTranslation } from 'react-i18next';
import SEOHead from './SEOHead';
import { shareGameResult } from '../utils/shareUtils';
import { detectLanguageFromSubdomain } from '../utils/languageDetection';

// ===== TYPES =====
interface GridConfig {
  size: number;
  rows: number;
  wordCount: number;
}

interface WordObj {
  word: string;
  start: [number, number];
  direction: [number, number];
  found: boolean;
}

interface GameState {
  grid: string[][];
  words: WordObj[];
  cols: number;
  rows: number;
  seed: number;
}

interface Cell {
  row: number;
  col: number;
}

interface Achievement {
  id: string;
  name: string;
  description: string;
  icon: string;
  unlocked: boolean;
  progress: number;
  maxProgress: number;
}

interface GameStats {
  totalGames: number;
  totalWordsFound: number;
  bestTime: number;
  averageTime: number;
  achievements: Achievement[];
  currentStreak: number;
  longestStreak: number;
}

// ===== CONSTANTS =====
const GRID_CONFIGS: Record<string, GridConfig> = {
  small: { size: 10, rows: 12, wordCount: 6 },
  medium: { size: 12, rows: 15, wordCount: 8 },
  large: { size: 14, rows: 18, wordCount: 10 },
};

// Configura√ß√µes espec√≠ficas para mobile e tablet
const MOBILE_GRID_CONFIGS: Record<string, GridConfig> = {
  small: { size: 10, rows: 12, wordCount: 6 },
  medium: { size: 10, rows: 16, wordCount: 8 },
  large: { size: 10, rows: 20, wordCount: 10 },
};

// Fun√ß√£o para obter configura√ß√£o baseada no tamanho da tela
const getGridConfig = (size: string, isMobile: boolean): GridConfig => {
  if (isMobile) {
    return MOBILE_GRID_CONFIGS[size] || MOBILE_GRID_CONFIGS.medium;
  }
  return GRID_CONFIGS[size] || GRID_CONFIGS.medium;
};

const DIRECTIONS = [
  [0, 1],
  [0, -1],
  [1, 0],
  [-1, 0],
  [1, 1],
  [-1, -1],
  [1, -1],
  [-1, 1],
];

// Sistema de Pontua√ß√£o
const SCORING = {
  wordFound: 100,
  timeBonus: 50, // pontos por segundo restante
  streakBonus: 25, // b√¥nus por palavras consecutivas
  difficultyMultiplier: {
    easy: 1,
    medium: 1.5,
    hard: 2,
  },
};

// Conquistas
const ACHIEVEMENTS: Achievement[] = [
  {
    id: 'first_word',
    name: 'Primeira Palavra',
    description: 'Encontre sua primeira palavra',
    icon: 'üéØ',
    unlocked: false,
    progress: 0,
    maxProgress: 1,
  },
  {
    id: 'speed_demon',
    name: 'Dem√¥nio da Velocidade',
    description: 'Complete um jogo em menos de 2 minutos',
    icon: '‚ö°',
    unlocked: false,
    progress: 0,
    maxProgress: 1,
  },
  {
    id: 'word_master',
    name: 'Mestre das Palavras',
    description: 'Encontre 50 palavras no total',
    icon: 'üèÜ',
    unlocked: false,
    progress: 0,
    maxProgress: 50,
  },
  {
    id: 'streak_champion',
    name: 'Campe√£o da Sequ√™ncia',
    description: 'Encontre 5 palavras consecutivas',
    icon: 'üî•',
    unlocked: false,
    progress: 0,
    maxProgress: 5,
  },
  {
    id: 'perfectionist',
    name: 'Perfeccionista',
    description: 'Complete 10 jogos sem erros',
    icon: 'üíé',
    unlocked: false,
    progress: 0,
    maxProgress: 10,
  },
];

const WORD_CATALOGS = {
  pt: {
    easy: {
      animals: [
        'GATO',
        'BOI',
        'RATO',
        'PATO',
        'URSO',
        'GALO',
        'CAO',
        'PORCO',
        'CAVALO',
        'VACA',
        'CARNEIRO',
        'COELHO',
        'PEIXE',
        'PASSARO',
        'CABRA',
        'OVELHA',
        'BURRO',
        'MACACO',
        'TIGRE',
        'LEAO',
        'ELEFANTE',
        'GIRAFA',
        'ZEBRA',
        'RAPOSA',
        'LOBINHO',
        'CORUJA',
        'AGUIA',
        'FALCAO',
        'POMBO',
        'ANDORINHA',
        'BORBOLETA',
        'GATINHO',
        'GAT√ÉO',
        'GATUCHO',
        'FELINO',
        'MIAU',
        'BIGODE',
        'CAUDA',
        'PATAS',
      ],
      colors: [
        'AZUL',
        'ROSA',
        'ROXO',
        'CINZA',
        'OURO',
        'VERDE',
        'CORAL',
        'BEGE',
        'MARROM',
        'PRETO',
        'BRANCO',
        'AMARELO',
        'LARANJA',
        'VERMELHO',
        'VIOLETA',
        'INDIGO',
        'TURQUESA',
        'MAGENTA',
        'CIANO',
        'LILAS',
        'SALMAO',
        'CREME',
        'BORD√î',
        'CARMIN',
        'ESCARLATE',
        'RUBI',
        'ESMERALDA',
        'JADE',
        'TURMALINA',
        'SAFIRA',
        'DIAMANTE',
        'AZUL_CLARO',
        'AZUL_ESCURO',
        'AZUL_MARINHO',
        'AZUL_CEU',
      ],
      foods: [
        'MACA',
        'BOLO',
        'SOPA',
        'OVO',
        'MEL',
        'SAL',
        'ACUCAR',
        'ARROZ',
        'FEIJAO',
        'PEIXE',
        'CARNE',
        'PAO',
        'QUEIJO',
        'BANANA',
        'LARANJA',
        'UVA',
        'PERA',
        'MORANGO',
        'ABACAXI',
        'MELANCIA',
        'MAMAO',
        'GOIABA',
        'MANGA',
        'ABACATE',
        'LIM√ÉO',
        'TANGERINA',
        'PESSEGO',
        'AMEIXA',
        'CEREJA',
        'FRAMBOESA',
      ],
      technology: [
        'COMPUTADOR',
        'TELEFONE',
        'INTERNET',
        'EMAIL',
        'SITE',
        'PROGRAMA',
        'ARQUIVO',
        'DADOS',
        'REDE',
        'SISTEMA',
        'CODIGO',
        'SENHA',
        'LOGIN',
        'SMARTPHONE',
        'TABLET',
        'LAPTOP',
        'NOTEBOOK',
        'DESKTOP',
        'SERVIDOR',
        'ROTEADOR',
        'MODEM',
        'CABO',
        'WIFI',
        'BLUETOOTH',
        'USB',
        'HDMI',
        'MONITOR',
        'TECLADO',
        'MOUSE',
        'IMPRESSORA',
        'COMPUTADOR_PESSOAL',
        'COMPUTADOR_PORTATIL',
        'COMPUTADOR_DESKTOP',
      ],
      professions: [
        'MEDICO',
        'PROFESSOR',
        'ENGENHEIRO',
        'ADVOGADO',
        'DENTISTA',
        'VETERINARIO',
        'ARQUITETO',
        'FARMACEUTICO',
        'ENFERMEIRO',
        'PSICOLOGO',
        'PEDAGOGO',
        'FISIOTERAPEUTA',
        'FONOAUDIOLOGO',
        'TERAPEUTA_OCUPACIONAL',
        'NUTRICIONISTA',
        'BIOQUIMICO',
        'BIOLOGO',
        'QUIMICO',
        'FISICO',
        'MATEMATICO',
        'ESTATISTICO',
        'ECONOMISTA',
        'ADMINISTRADOR',
        'CONTADOR',
        'AUDITOR',
        'ANALISTA',
        'PROGRAMADOR',
        'DESENVOLVEDOR',
        'ANALISTA_DE_SISTEMAS',
        'ADMINISTRADOR_DE_REDES',
        'TECNICO_DE_INFORMATICA',
        'MEDICO_GERAL',
        'MEDICO_ESPECIALISTA',
        'MEDICO_RESIDENTE',
        'CLINICO',
        'CIRURGIAO',
      ],
      sports: [
        'FUTEBOL',
        'BASQUETE',
        'TENIS',
        'NATACAO',
        'VOLEI',
        'ATLETISMO',
        'GINASTICA',
        'SURF',
        'SKATE',
        'CICLISMO',
        'HANDEBOL',
        'RUGBY',
        'BADMINTON',
        'SQUASH',
        'ESGRIMA',
        'TIRO',
        'CANOAGEM',
        'REMO',
        'TRIATLO',
        'MARATONA',
        'CORRIDA',
        'SALTO',
        'LAN√áAMENTO',
        'ARREMESSO',
        'DARDOS',
        'BOLICHE',
        'SINUCA',
        'BILHAR',
        'PING_PONG',
        'TENIS_MESA',
      ],
      music: [
        'PIANO',
        'VIOLAO',
        'BATERIA',
        'FLAUTA',
        'SAXOFONE',
        'TROMPETE',
        'CLARINETE',
        'HARPA',
        'ACORDEAO',
        'TECLADO',
        'VIOLINO',
        'VIOLA',
        'VIOLONCELO',
        'CONTRABAIXO',
        'TROMBONE',
        'TUBA',
        'FAGOTE',
        'OBOE',
        'CORNO',
        'TIMPANI',
        'TRIANGULO',
        'XILOFONE',
        'VIBRAFONE',
        'MARIMBA',
        'GLOCKENSPIEL',
        'CELESTA',
        'ORG√ÉO',
        'SINTETIZADOR',
        'GUITARRA_ELETRICA',
        'BAIXO_ELETRICO',
        'PIANO_ELETRICO',
        'PIANO_ACUSTICO',
        'PIANO_DIGITAL',
        'ORGAO',
      ],
      nature: [
        'ARVORE',
        'FLOR',
        'MONTANHA',
        'RIO',
        'OCEANO',
        'FLORESTA',
        'PRAIA',
        'DESERTO',
        'CACHOEIRA',
        'VULCAO',
        'LAGO',
        'LAGOA',
        'CASCATA',
        'SERRA',
        'COLINA',
        'VALLE',
        'CANION',
        'CAVERNA',
        'GRUTA',
        'BURACO',
        'FOSSA',
        'ABISMO',
        'PRECIPICIO',
        'PENHASCO',
        'ROCHA',
        'PEDRA',
        'AREIA',
        'TERRA',
        'BARRO',
        'ARGILA',
      ],
    },
    medium: {
      animals: [
        'GATO_COMPLEXO',
        'BOI_COMPLEXO',
        'RATO_COMPLEXO',
        'PATO_COMPLEXO',
        'URSO_COMPLEXO',
        'GALO_COMPLEXO',
        'CAO_COMPLEXO',
        'PORCO',
        'CAVALO',
        'VACA_COMPLEXO',
        'CARNEIRO',
        'COELHO',
        'PEIXE',
        'PASSARO',
        'CABRA',
        'OVELHA',
        'BURRO',
        'MACACO',
        'TIGRE',
        'LEAO_COMPLEXO',
        'ELEFANTE',
        'GIRAFA',
        'ZEBRA',
        'RAPOSA',
        'LOBINHO',
        'CORUJA',
        'AGUIA',
        'FALCAO',
        'POMBO',
        'ANDORINHA',
        'BORBOLETA',
        'GATINHO',
        'GAT√ÉO',
        'GATUCHO',
        'FELINO',
        'MIAU_COMPLEXO',
        'BIGODE',
        'CAUDA',
        'PATAS',
      ],
      colors: [
        'AZUL_COMPLEXO',
        'ROSA_COMPLEXO',
        'ROXO_COMPLEXO',
        'CINZA',
        'OURO_COMPLEXO',
        'VERDE',
        'CORAL',
        'BEGE_COMPLEXO',
        'MARROM',
        'PRETO',
        'BRANCO',
        'AMARELO',
        'LARANJA',
        'VERMELHO',
        'VIOLETA',
        'INDIGO',
        'TURQUESA',
        'MAGENTA',
        'CIANO',
        'LILAS',
        'SALMAO',
        'CREME',
        'BORD√î',
        'CARMIN',
        'ESCARLATE',
        'RUBI_COMPLEXO',
        'ESMERALDA',
        'JADE_COMPLEXO',
        'TURMALINA',
        'SAFIRA',
        'DIAMANTE',
        'AZUL_CLARO',
        'AZUL_ESCURO',
        'AZUL_MARINHO',
        'AZUL_CEU',
      ],
      foods: [
        'MACA_COMPLEXO',
        'BOLO_COMPLEXO',
        'SOPA_COMPLEXO',
        'OVO_COMPLEXO',
        'MEL_COMPLEXO',
        'SAL_COMPLEXO',
        'ACUCAR',
        'ARROZ',
        'FEIJAO',
        'PEIXE',
        'CARNE',
        'PAO_COMPLEXO',
        'QUEIJO',
        'BANANA',
        'LARANJA',
        'UVA_COMPLEXO',
        'PERA_COMPLEXO',
        'MORANGO',
        'ABACAXI',
        'MELANCIA',
        'MAMAO',
        'GOIABA',
        'MANGA',
        'ABACATE',
        'LIM√ÉO',
        'TANGERINA',
        'PESSEGO',
        'AMEIXA',
        'CEREJA',
        'FRAMBOESA',
      ],
      technology: [
        'COMPUTADOR',
        'TELEFONE',
        'INTERNET',
        'EMAIL',
        'SITE_COMPLEXO',
        'PROGRAMA',
        'ARQUIVO',
        'DADOS',
        'REDE_COMPLEXO',
        'SISTEMA',
        'CODIGO',
        'SENHA',
        'LOGIN',
        'SMARTPHONE',
        'TABLET',
        'LAPTOP',
        'NOTEBOOK',
        'DESKTOP',
        'SERVIDOR',
        'ROTEADOR',
        'MODEM',
        'CABO_COMPLEXO',
        'WIFI_COMPLEXO',
        'BLUETOOTH',
        'USB_COMPLEXO',
        'HDMI_COMPLEXO',
        'MONITOR',
        'TECLADO',
        'MOUSE',
        'IMPRESSORA',
        'COMPUTADOR_PESSOAL',
        'COMPUTADOR_PORTATIL',
        'COMPUTADOR_DESKTOP',
      ],
      professions: [
        'MEDICO',
        'PROFESSOR',
        'ENGENHEIRO',
        'ADVOGADO',
        'DENTISTA',
        'VETERINARIO',
        'ARQUITETO',
        'FARMACEUTICO',
        'ENFERMEIRO',
        'PSICOLOGO',
        'PEDAGOGO',
        'FISIOTERAPEUTA',
        'FONOAUDIOLOGO',
        'TERAPEUTA_OCUPACIONAL',
        'NUTRICIONISTA',
        'BIOQUIMICO',
        'BIOLOGO',
        'QUIMICO',
        'FISICO',
        'MATEMATICO',
        'ESTATISTICO',
        'ECONOMISTA',
        'ADMINISTRADOR',
        'CONTADOR',
        'AUDITOR',
        'ANALISTA',
        'PROGRAMADOR',
        'DESENVOLVEDOR',
        'ANALISTA_DE_SISTEMAS',
        'ADMINISTRADOR_DE_REDES',
        'TECNICO_DE_INFORMATICA',
        'MEDICO_GERAL',
        'MEDICO_ESPECIALISTA',
        'MEDICO_RESIDENTE',
        'CLINICO',
        'CIRURGIAO',
      ],
      sports: [
        'FUTEBOL',
        'BASQUETE',
        'TENIS',
        'NATACAO',
        'VOLEI',
        'ATLETISMO',
        'GINASTICA',
        'SURF_COMPLEXO',
        'SKATE',
        'CICLISMO',
        'HANDEBOL',
        'RUGBY',
        'BADMINTON',
        'SQUASH',
        'ESGRIMA',
        'TIRO_COMPLEXO',
        'CANOAGEM',
        'REMO_COMPLEXO',
        'TRIATLO',
        'MARATONA',
        'CORRIDA',
        'SALTO',
        'LAN√áAMENTO',
        'ARREMESSO',
        'DARDOS',
        'BOLICHE',
        'SINUCA',
        'BILHAR',
        'PING_PONG',
        'TENIS_MESA',
      ],
      music: [
        'PIANO',
        'VIOLAO',
        'BATERIA',
        'FLAUTA',
        'SAXOFONE',
        'TROMPETE',
        'CLARINETE',
        'HARPA',
        'ACORDEAO',
        'TECLADO',
        'VIOLINO',
        'VIOLA',
        'VIOLONCELO',
        'CONTRABAIXO',
        'TROMBONE',
        'TUBA_COMPLEXO',
        'FAGOTE',
        'OBOE_COMPLEXO',
        'CORNO',
        'TIMPANI',
        'TRIANGULO',
        'XILOFONE',
        'VIBRAFONE',
        'MARIMBA',
        'GLOCKENSPIEL',
        'CELESTA',
        'ORG√ÉO',
        'SINTETIZADOR',
        'GUITARRA_ELETRICA',
        'BAIXO_ELETRICO',
        'PIANO_ELETRICO',
        'PIANO_ACUSTICO',
        'PIANO_DIGITAL',
        'ORGAO',
      ],
      nature: [
        'ARVORE',
        'FLOR_COMPLEXO',
        'MONTANHA',
        'RIO_COMPLEXO',
        'OCEANO',
        'FLORESTA',
        'PRAIA',
        'DESERTO',
        'CACHOEIRA',
        'VULCAO',
        'LAGO_COMPLEXO',
        'LAGOA',
        'CASCATA',
        'SERRA',
        'COLINA',
        'VALLE',
        'CANION',
        'CAVERNA',
        'GRUTA',
        'BURACO',
        'FOSSA',
        'ABISMO',
        'PRECIPICIO',
        'PENHASCO',
        'ROCHA',
        'PEDRA',
        'AREIA',
        'TERRA',
        'BARRO',
        'ARGILA',
      ],
    },
    hard: {
      animals: [
        'GATO_MUITO_COMPLEXO',
        'BOI_MUITO_COMPLEXO',
        'RATO_MUITO_COMPLEXO',
        'PATO_MUITO_COMPLEXO',
        'URSO_MUITO_COMPLEXO',
        'GALO_MUITO_COMPLEXO',
        'CAO_MUITO_COMPLEXO',
        'PORCO_MUITO_COMPLEXO',
        'CAVALO_MUITO_COMPLEXO',
        'VACA_MUITO_COMPLEXO',
        'CARNEIRO',
        'COELHO_MUITO_COMPLEXO',
        'PEIXE_MUITO_COMPLEXO',
        'PASSARO',
        'CABRA_MUITO_COMPLEXO',
        'OVELHA_MUITO_COMPLEXO',
        'BURRO_MUITO_COMPLEXO',
        'MACACO_MUITO_COMPLEXO',
        'TIGRE_MUITO_COMPLEXO',
        'LEAO_MUITO_COMPLEXO',
        'ELEFANTE',
        'GIRAFA_MUITO_COMPLEXO',
        'ZEBRA_MUITO_COMPLEXO',
        'RAPOSA_MUITO_COMPLEXO',
        'LOBINHO',
        'CORUJA_MUITO_COMPLEXO',
        'AGUIA_MUITO_COMPLEXO',
        'FALCAO_MUITO_COMPLEXO',
        'POMBO_MUITO_COMPLEXO',
        'ANDORINHA',
        'BORBOLETA',
        'GATINHO',
        'GAT√ÉO_MUITO_COMPLEXO',
        'GATUCHO',
        'FELINO_MUITO_COMPLEXO',
        'MIAU_MUITO_COMPLEXO',
        'BIGODE_MUITO_COMPLEXO',
        'CAUDA_MUITO_COMPLEXO',
        'PATAS_MUITO_COMPLEXO',
      ],
      colors: [
        'AZUL_MUITO_COMPLEXO',
        'ROSA_MUITO_COMPLEXO',
        'ROXO_MUITO_COMPLEXO',
        'CINZA_MUITO_COMPLEXO',
        'OURO_MUITO_COMPLEXO',
        'VERDE_MUITO_COMPLEXO',
        'CORAL_MUITO_COMPLEXO',
        'BEGE_MUITO_COMPLEXO',
        'MARROM_MUITO_COMPLEXO',
        'PRETO_MUITO_COMPLEXO',
        'BRANCO_MUITO_COMPLEXO',
        'AMARELO',
        'LARANJA',
        'VERMELHO',
        'VIOLETA',
        'INDIGO_MUITO_COMPLEXO',
        'TURQUESA',
        'MAGENTA',
        'CIANO_MUITO_COMPLEXO',
        'LILAS_MUITO_COMPLEXO',
        'SALMAO_MUITO_COMPLEXO',
        'CREME_MUITO_COMPLEXO',
        'BORD√î_MUITO_COMPLEXO',
        'CARMIN_MUITO_COMPLEXO',
        'ESCARLATE',
        'RUBI_MUITO_COMPLEXO',
        'ESMERALDA',
        'JADE_MUITO_COMPLEXO',
        'TURMALINA',
        'SAFIRA_MUITO_COMPLEXO',
        'DIAMANTE',
        'AZUL_CLARO',
        'AZUL_ESCURO',
        'AZUL_MARINHO',
        'AZUL_CEU',
      ],
      foods: [
        'MACA_MUITO_COMPLEXO',
        'BOLO_MUITO_COMPLEXO',
        'SOPA_MUITO_COMPLEXO',
        'OVO_MUITO_COMPLEXO',
        'MEL_MUITO_COMPLEXO',
        'SAL_MUITO_COMPLEXO',
        'ACUCAR_MUITO_COMPLEXO',
        'ARROZ_MUITO_COMPLEXO',
        'FEIJAO_MUITO_COMPLEXO',
        'PEIXE_MUITO_COMPLEXO',
        'CARNE_MUITO_COMPLEXO',
        'PAO_MUITO_COMPLEXO',
        'QUEIJO_MUITO_COMPLEXO',
        'BANANA_MUITO_COMPLEXO',
        'LARANJA',
        'UVA_MUITO_COMPLEXO',
        'PERA_MUITO_COMPLEXO',
        'MORANGO',
        'ABACAXI',
        'MELANCIA',
        'MAMAO_MUITO_COMPLEXO',
        'GOIABA_MUITO_COMPLEXO',
        'MANGA_MUITO_COMPLEXO',
        'ABACATE',
        'LIM√ÉO_MUITO_COMPLEXO',
        'TANGERINA',
        'PESSEGO',
        'AMEIXA_MUITO_COMPLEXO',
        'CEREJA_MUITO_COMPLEXO',
        'FRAMBOESA',
      ],
      technology: [
        'COMPUTADOR',
        'TELEFONE',
        'INTERNET',
        'EMAIL_MUITO_COMPLEXO',
        'SITE_MUITO_COMPLEXO',
        'PROGRAMA',
        'ARQUIVO',
        'DADOS_MUITO_COMPLEXO',
        'REDE_MUITO_COMPLEXO',
        'SISTEMA',
        'CODIGO_MUITO_COMPLEXO',
        'SENHA_MUITO_COMPLEXO',
        'LOGIN_MUITO_COMPLEXO',
        'SMARTPHONE',
        'TABLET_MUITO_COMPLEXO',
        'LAPTOP_MUITO_COMPLEXO',
        'NOTEBOOK',
        'DESKTOP',
        'SERVIDOR',
        'ROTEADOR',
        'MODEM_MUITO_COMPLEXO',
        'CABO_MUITO_COMPLEXO',
        'WIFI_MUITO_COMPLEXO',
        'BLUETOOTH',
        'USB_MUITO_COMPLEXO',
        'HDMI_MUITO_COMPLEXO',
        'MONITOR',
        'TECLADO',
        'MOUSE_MUITO_COMPLEXO',
        'IMPRESSORA',
        'COMPUTADOR_PESSOAL',
        'COMPUTADOR_PORTATIL',
        'COMPUTADOR_DESKTOP',
      ],
      professions: [
        'MEDICO_MUITO_COMPLEXO',
        'PROFESSOR',
        'ENGENHEIRO',
        'ADVOGADO',
        'DENTISTA',
        'VETERINARIO',
        'ARQUITETO',
        'FARMACEUTICO',
        'ENFERMEIRO',
        'PSICOLOGO',
        'PEDAGOGO',
        'FISIOTERAPEUTA',
        'FONOAUDIOLOGO',
        'TERAPEUTA_OCUPACIONAL',
        'NUTRICIONISTA',
        'BIOQUIMICO',
        'BIOLOGO',
        'QUIMICO',
        'FISICO_MUITO_COMPLEXO',
        'MATEMATICO',
        'ESTATISTICO',
        'ECONOMISTA',
        'ADMINISTRADOR',
        'CONTADOR',
        'AUDITOR',
        'ANALISTA',
        'PROGRAMADOR',
        'DESENVOLVEDOR',
        'ANALISTA_DE_SISTEMAS',
        'ADMINISTRADOR_DE_REDES',
        'TECNICO_DE_INFORMATICA',
        'MEDICO_GERAL',
        'MEDICO_ESPECIALISTA',
        'MEDICO_RESIDENTE',
        'CLINICO',
        'CIRURGIAO',
      ],
      sports: [
        'FUTEBOL',
        'BASQUETE',
        'TENIS_MUITO_COMPLEXO',
        'NATACAO',
        'VOLEI_MUITO_COMPLEXO',
        'ATLETISMO',
        'GINASTICA',
        'SURF_MUITO_COMPLEXO',
        'SKATE_MUITO_COMPLEXO',
        'CICLISMO',
        'HANDEBOL',
        'RUGBY_MUITO_COMPLEXO',
        'BADMINTON',
        'SQUASH_MUITO_COMPLEXO',
        'ESGRIMA',
        'TIRO_MUITO_COMPLEXO',
        'CANOAGEM',
        'REMO_MUITO_COMPLEXO',
        'TRIATLO',
        'MARATONA',
        'CORRIDA',
        'SALTO_MUITO_COMPLEXO',
        'LAN√áAMENTO',
        'ARREMESSO',
        'DARDOS_MUITO_COMPLEXO',
        'BOLICHE',
        'SINUCA_MUITO_COMPLEXO',
        'BILHAR_MUITO_COMPLEXO',
        'PING_PONG',
        'TENIS_MESA',
      ],
      music: [
        'PIANO_MUITO_COMPLEXO',
        'VIOLAO_MUITO_COMPLEXO',
        'BATERIA',
        'FLAUTA_MUITO_COMPLEXO',
        'SAXOFONE',
        'TROMPETE',
        'CLARINETE',
        'HARPA_MUITO_COMPLEXO',
        'ACORDEAO',
        'TECLADO',
        'VIOLINO',
        'VIOLA_MUITO_COMPLEXO',
        'VIOLONCELO',
        'CONTRABAIXO',
        'TROMBONE',
        'TUBA_MUITO_COMPLEXO',
        'FAGOTE_MUITO_COMPLEXO',
        'OBOE_MUITO_COMPLEXO',
        'CORNO_MUITO_COMPLEXO',
        'TIMPANI',
        'TRIANGULO',
        'XILOFONE',
        'VIBRAFONE',
        'MARIMBA',
        'GLOCKENSPIEL',
        'CELESTA',
        'ORG√ÉO_MUITO_COMPLEXO',
        'SINTETIZADOR',
        'GUITARRA_ELETRICA',
        'BAIXO_ELETRICO',
        'PIANO_ELETRICO',
        'PIANO_ACUSTICO',
        'PIANO_DIGITAL',
        'ORGAO_MUITO_COMPLEXO',
      ],
      nature: [
        'ARVORE_MUITO_COMPLEXO',
        'FLOR_MUITO_COMPLEXO',
        'MONTANHA',
        'RIO_MUITO_COMPLEXO',
        'OCEANO_MUITO_COMPLEXO',
        'FLORESTA',
        'PRAIA_MUITO_COMPLEXO',
        'DESERTO',
        'CACHOEIRA',
        'VULCAO_MUITO_COMPLEXO',
        'LAGO_MUITO_COMPLEXO',
        'LAGOA_MUITO_COMPLEXO',
        'CASCATA',
        'SERRA_MUITO_COMPLEXO',
        'COLINA_MUITO_COMPLEXO',
        'VALLE_MUITO_COMPLEXO',
        'CANION_MUITO_COMPLEXO',
        'CAVERNA',
        'GRUTA_MUITO_COMPLEXO',
        'BURACO_MUITO_COMPLEXO',
        'FOSSA_MUITO_COMPLEXO',
        'ABISMO_MUITO_COMPLEXO',
        'PRECIPICIO',
        'PENHASCO',
        'ROCHA_MUITO_COMPLEXO',
        'PEDRA_MUITO_COMPLEXO',
        'AREIA_MUITO_COMPLEXO',
        'TERRA_MUITO_COMPLEXO',
        'BARRO_MUITO_COMPLEXO',
        'ARGILA_MUITO_COMPLEXO',
      ],
    },
  },
  en: {
    easy: {
      animals: [
        'CAT',
        'DOG',
        'BIRD',
        'FISH',
        'BEAR',
        'DUCK',
        'FROG',
        'DEER',
        'FOX',
        'BEE',
        'ANT',
        'RAT',
        'BAT',
        'COW',
        'HORSE',
        'PIG',
        'SHEEP',
        'GOAT',
        'DONKEY',
        'MONKEY',
        'TIGER',
        'LION',
        'ELEPHANT',
        'GIRAFFE',
        'ZEBRA',
        'WOLF',
        'OWL',
        'EAGLE',
        'HAWK',
        'PIGEON',
        'SWALLOW',
        'BUTTERFLY',
        'KITTEN',
        'KITTY',
        'FELINE',
        'TOMCAT',
        'MEOW',
        'WHISKERS',
        'TAIL',
        'PAWS',
      ],
      colors: [
        'RED',
        'BLUE',
        'GREEN',
        'PINK',
        'GOLD',
        'GRAY',
        'BLACK',
        'WHITE',
        'BROWN',
        'BEIGE',
        'YELLOW',
        'ORANGE',
        'PURPLE',
        'VIOLET',
        'INDIGO',
        'TURQUOISE',
        'MAGENTA',
        'CYAN',
        'LAVENDER',
        'SALMON',
        'CREAM',
        'BURGUNDY',
        'CARMINE',
        'SCARLET',
        'RUBY',
        'EMERALD',
        'JADE',
        'TOURMALINE',
        'SAPPHIRE',
        'DIAMOND',
        'BLUE_LIGHT',
        'BLUE_DARK',
        'BLUE_NAVY',
        'BLUE_SKY',
      ],
      foods: [
        'APPLE',
        'BREAD',
        'EGG',
        'CAKE',
        'SOUP',
        'RICE',
        'FISH',
        'MEAT',
        'CORN',
        'BEANS',
        'PASTA',
        'CHEESE',
        'BANANA',
        'ORANGE',
        'GRAPE',
        'PEAR',
        'STRAWBERRY',
        'PINEAPPLE',
        'WATERMELON',
        'PAPAYA',
        'GUAVA',
        'MANGO',
        'AVOCADO',
        'LEMON',
        'TANGERINE',
        'PEACH',
        'PLUM',
        'CHERRY',
        'RASPBERRY',
        'BLUEBERRY',
      ],
      technology: [
        'COMPUTER',
        'PHONE',
        'INTERNET',
        'EMAIL',
        'WEBSITE',
        'PROGRAM',
        'FILE',
        'DATA',
        'NETWORK',
        'SYSTEM',
        'CODE',
        'PASSWORD',
        'LOGIN',
        'SMARTPHONE',
        'TABLET',
        'LAPTOP',
        'NOTEBOOK',
        'DESKTOP',
        'SERVER',
        'ROUTER',
        'MODEM',
        'CABLE',
        'WIFI',
        'BLUETOOTH',
        'USB',
        'HDMI',
        'MONITOR',
        'KEYBOARD',
        'MOUSE',
        'PRINTER',
        'COMPUTER_PERSONAL',
        'COMPUTER_LAPTOP',
        'COMPUTER_DESKTOP',
      ],
      professions: [
        'DOCTOR',
        'TEACHER',
        'ENGINEER',
        'LAWYER',
        'DENTIST',
        'VETERINARIAN',
        'ARCHITECT',
        'PHARMACIST',
        'NURSE',
        'PSYCHOLOGIST',
        'PEDAGOGUE',
        'PHYSIOTHERAPIST',
        'SPEECH_THERAPIST',
        'OCCUPATIONAL_THERAPIST',
        'NUTRITIONIST',
        'BIOCHEMIST',
        'BIOLOGIST',
        'CHEMIST',
        'PHYSICIST',
        'MATHEMATICIAN',
        'STATISTICIAN',
        'ECONOMIST',
        'ADMINISTRATOR',
        'ACCOUNTANT',
        'AUDITOR',
        'ANALYST',
        'PROGRAMMER',
        'DEVELOPER',
        'SYSTEMS_ANALYST',
        'NETWORK_ADMINISTRATOR',
        'IT_TECHNICIAN',
        'DOCTOR_GENERAL',
        'DOCTOR_SPECIALIST',
        'DOCTOR_RESIDENT',
        'PHYSICIAN',
        'SURGEON',
      ],
      sports: [
        'FOOTBALL',
        'BASKETBALL',
        'TENNIS',
        'SWIMMING',
        'VOLLEYBALL',
        'ATHLETICS',
        'GYMNASTICS',
        'SURFING',
        'SKATEBOARDING',
        'CYCLING',
        'HANDBALL',
        'RUGBY',
        'BADMINTON',
        'SQUASH',
        'FENCING',
        'SHOOTING',
        'CANOEING',
        'ROWING',
        'TRIATHLON',
        'MARATHON',
        'RUNNING',
        'JUMPING',
        'THROWING',
        'DARTS',
        'BOWLING',
        'SNOOKER',
        'BILLIARDS',
        'PING_PONG',
        'TABLE_TENNIS',
      ],
      music: [
        'PIANO',
        'GUITAR',
        'DRUMS',
        'FLUTE',
        'SAXOPHONE',
        'TRUMPET',
        'CLARINET',
        'HARP',
        'ACCORDION',
        'KEYBOARD',
        'VIOLIN',
        'VIOLA',
        'CELLO',
        'DOUBLE_BASS',
        'TROMBONE',
        'TUBA',
        'BASSOON',
        'OBOE',
        'FRENCH_HORN',
        'TIMPANI',
        'TRIANGLE',
        'XYLOPHONE',
        'VIBRAPHONE',
        'MARIMBA',
        'GLOCKENSPIEL',
        'CELESTA',
        'ORGAN',
        'SYNTHESIZER',
        'ELECTRIC_GUITAR',
        'ELECTRIC_BASS',
        'PIANO_ELECTRIC',
        'PIANO_ACOUSTIC',
        'PIANO_DIGITAL',
      ],
      nature: [
        'TREE',
        'FLOWER',
        'MOUNTAIN',
        'RIVER',
        'OCEAN',
        'FOREST',
        'BEACH',
        'DESERT',
        'WATERFALL',
        'VOLCANO',
        'LAKE',
        'LAGOON',
        'CASCADE',
        'RANGE',
        'HILL',
        'VALLEY',
        'CANYON',
        'CAVE',
        'GROTTO',
        'HOLE',
        'PIT',
        'ABYSS',
        'PRECIPICE',
        'CLIFF',
        'ROCK',
        'STONE',
        'SAND',
        'EARTH',
        'CLAY',
        'MUD',
      ],
    },
    medium: {
      animals: [
        'CAT_COMPLEXO',
        'DOG_COMPLEXO',
        'BIRD_COMPLEXO',
        'FISH_COMPLEXO',
        'BEAR_COMPLEXO',
        'DUCK_COMPLEXO',
        'FROG_COMPLEXO',
        'DEER_COMPLEXO',
        'FOX_COMPLEXO',
        'BEE_COMPLEXO',
        'ANT_COMPLEXO',
        'RAT_COMPLEXO',
        'BAT_COMPLEXO',
        'COW_COMPLEXO',
        'HORSE',
        'PIG_COMPLEXO',
        'SHEEP',
        'GOAT_COMPLEXO',
        'DONKEY',
        'MONKEY',
        'TIGER',
        'LION_COMPLEXO',
        'ELEPHANT',
        'GIRAFFE',
        'ZEBRA',
        'WOLF_COMPLEXO',
        'OWL_COMPLEXO',
        'EAGLE',
        'HAWK_COMPLEXO',
        'PIGEON',
        'SWALLOW',
        'BUTTERFLY',
        'KITTEN',
        'KITTY',
        'FELINE',
        'TOMCAT',
        'MEOW_COMPLEXO',
        'WHISKERS',
        'TAIL_COMPLEXO',
        'PAWS_COMPLEXO',
      ],
      colors: [
        'RED_COMPLEXO',
        'BLUE_COMPLEXO',
        'GREEN',
        'PINK_COMPLEXO',
        'GOLD_COMPLEXO',
        'GRAY_COMPLEXO',
        'BLACK',
        'WHITE',
        'BROWN',
        'BEIGE',
        'YELLOW',
        'ORANGE',
        'PURPLE',
        'VIOLET',
        'INDIGO',
        'TURQUOISE',
        'MAGENTA',
        'CYAN_COMPLEXO',
        'LAVENDER',
        'SALMON',
        'CREAM',
        'BURGUNDY',
        'CARMINE',
        'SCARLET',
        'RUBY_COMPLEXO',
        'EMERALD',
        'JADE_COMPLEXO',
        'TOURMALINE',
        'SAPPHIRE',
        'DIAMOND',
        'BLUE_LIGHT',
        'BLUE_DARK',
        'BLUE_NAVY',
        'BLUE_SKY',
      ],
      foods: [
        'APPLE',
        'BREAD',
        'EGG_COMPLEXO',
        'CAKE_COMPLEXO',
        'SOUP_COMPLEXO',
        'RICE_COMPLEXO',
        'FISH_COMPLEXO',
        'MEAT_COMPLEXO',
        'CORN_COMPLEXO',
        'BEANS',
        'PASTA',
        'CHEESE',
        'BANANA',
        'ORANGE',
        'GRAPE',
        'PEAR_COMPLEXO',
        'STRAWBERRY',
        'PINEAPPLE',
        'WATERMELON',
        'PAPAYA',
        'GUAVA',
        'MANGO',
        'AVOCADO',
        'LEMON',
        'TANGERINE',
        'PEACH',
        'PLUM_COMPLEXO',
        'CHERRY',
        'RASPBERRY',
        'BLUEBERRY',
      ],
      technology: [
        'COMPUTER',
        'PHONE',
        'INTERNET',
        'EMAIL',
        'WEBSITE',
        'PROGRAM',
        'FILE_COMPLEXO',
        'DATA_COMPLEXO',
        'NETWORK',
        'SYSTEM',
        'CODE_COMPLEXO',
        'PASSWORD',
        'LOGIN',
        'SMARTPHONE',
        'TABLET',
        'LAPTOP',
        'NOTEBOOK',
        'DESKTOP',
        'SERVER',
        'ROUTER',
        'MODEM',
        'CABLE',
        'WIFI_COMPLEXO',
        'BLUETOOTH',
        'USB_COMPLEXO',
        'HDMI_COMPLEXO',
        'MONITOR',
        'KEYBOARD',
        'MOUSE',
        'PRINTER',
        'COMPUTER_PERSONAL',
        'COMPUTER_LAPTOP',
        'COMPUTER_DESKTOP',
      ],
      professions: [
        'DOCTOR',
        'TEACHER',
        'ENGINEER',
        'LAWYER',
        'DENTIST',
        'VETERINARIAN',
        'ARCHITECT',
        'PHARMACIST',
        'NURSE',
        'PSYCHOLOGIST',
        'PEDAGOGUE',
        'PHYSIOTHERAPIST',
        'SPEECH_THERAPIST',
        'OCCUPATIONAL_THERAPIST',
        'NUTRITIONIST',
        'BIOCHEMIST',
        'BIOLOGIST',
        'CHEMIST',
        'PHYSICIST',
        'MATHEMATICIAN',
        'STATISTICIAN',
        'ECONOMIST',
        'ADMINISTRATOR',
        'ACCOUNTANT',
        'AUDITOR',
        'ANALYST',
        'PROGRAMMER',
        'DEVELOPER',
        'SYSTEMS_ANALYST',
        'NETWORK_ADMINISTRATOR',
        'IT_TECHNICIAN',
        'DOCTOR_GENERAL',
        'DOCTOR_SPECIALIST',
        'DOCTOR_RESIDENT',
        'PHYSICIAN',
        'SURGEON',
      ],
      sports: [
        'FOOTBALL',
        'BASKETBALL',
        'TENNIS',
        'SWIMMING',
        'VOLLEYBALL',
        'ATHLETICS',
        'GYMNASTICS',
        'SURFING',
        'SKATEBOARDING',
        'CYCLING',
        'HANDBALL',
        'RUGBY',
        'BADMINTON',
        'SQUASH',
        'FENCING',
        'SHOOTING',
        'CANOEING',
        'ROWING',
        'TRIATHLON',
        'MARATHON',
        'RUNNING',
        'JUMPING',
        'THROWING',
        'DARTS',
        'BOWLING',
        'SNOOKER',
        'BILLIARDS',
        'PING_PONG',
        'TABLE_TENNIS',
      ],
      music: [
        'PIANO',
        'GUITAR',
        'DRUMS',
        'FLUTE',
        'SAXOPHONE',
        'TRUMPET',
        'CLARINET',
        'HARP_COMPLEXO',
        'ACCORDION',
        'KEYBOARD',
        'VIOLIN',
        'VIOLA',
        'CELLO',
        'DOUBLE_BASS',
        'TROMBONE',
        'TUBA_COMPLEXO',
        'BASSOON',
        'OBOE_COMPLEXO',
        'FRENCH_HORN',
        'TIMPANI',
        'TRIANGLE',
        'XYLOPHONE',
        'VIBRAPHONE',
        'MARIMBA',
        'GLOCKENSPIEL',
        'CELESTA',
        'ORGAN',
        'SYNTHESIZER',
        'ELECTRIC_GUITAR',
        'ELECTRIC_BASS',
        'PIANO_ELECTRIC',
        'PIANO_ACOUSTIC',
        'PIANO_DIGITAL',
      ],
      nature: [
        'TREE_COMPLEXO',
        'FLOWER',
        'MOUNTAIN',
        'RIVER',
        'OCEAN',
        'FOREST',
        'BEACH',
        'DESERT',
        'WATERFALL',
        'VOLCANO',
        'LAKE_COMPLEXO',
        'LAGOON',
        'CASCADE',
        'RANGE',
        'HILL_COMPLEXO',
        'VALLEY',
        'CANYON',
        'CAVE_COMPLEXO',
        'GROTTO',
        'HOLE_COMPLEXO',
        'PIT_COMPLEXO',
        'ABYSS',
        'PRECIPICE',
        'CLIFF',
        'ROCK_COMPLEXO',
        'STONE',
        'SAND_COMPLEXO',
        'EARTH',
        'CLAY_COMPLEXO',
        'MUD_COMPLEXO',
      ],
    },
    hard: {
      animals: [
        'CAT_MUITO_COMPLEXO',
        'DOG_MUITO_COMPLEXO',
        'BIRD_MUITO_COMPLEXO',
        'FISH_MUITO_COMPLEXO',
        'BEAR_MUITO_COMPLEXO',
        'DUCK_MUITO_COMPLEXO',
        'FROG_MUITO_COMPLEXO',
        'DEER_MUITO_COMPLEXO',
        'FOX_MUITO_COMPLEXO',
        'BEE_MUITO_COMPLEXO',
        'ANT_MUITO_COMPLEXO',
        'RAT_MUITO_COMPLEXO',
        'BAT_MUITO_COMPLEXO',
        'COW_MUITO_COMPLEXO',
        'HORSE_MUITO_COMPLEXO',
        'PIG_MUITO_COMPLEXO',
        'SHEEP_MUITO_COMPLEXO',
        'GOAT_MUITO_COMPLEXO',
        'DONKEY_MUITO_COMPLEXO',
        'MONKEY_MUITO_COMPLEXO',
        'TIGER_MUITO_COMPLEXO',
        'LION_MUITO_COMPLEXO',
        'ELEPHANT',
        'GIRAFFE',
        'ZEBRA_MUITO_COMPLEXO',
        'WOLF_MUITO_COMPLEXO',
        'OWL_MUITO_COMPLEXO',
        'EAGLE_MUITO_COMPLEXO',
        'HAWK_MUITO_COMPLEXO',
        'PIGEON_MUITO_COMPLEXO',
        'SWALLOW',
        'BUTTERFLY',
        'KITTEN_MUITO_COMPLEXO',
        'KITTY_MUITO_COMPLEXO',
        'FELINE_MUITO_COMPLEXO',
        'TOMCAT_MUITO_COMPLEXO',
        'MEOW_MUITO_COMPLEXO',
        'WHISKERS',
        'TAIL_MUITO_COMPLEXO',
        'PAWS_MUITO_COMPLEXO',
      ],
      colors: [
        'RED_MUITO_COMPLEXO',
        'BLUE_MUITO_COMPLEXO',
        'GREEN_MUITO_COMPLEXO',
        'PINK_MUITO_COMPLEXO',
        'GOLD_MUITO_COMPLEXO',
        'GRAY_MUITO_COMPLEXO',
        'BLACK_MUITO_COMPLEXO',
        'WHITE_MUITO_COMPLEXO',
        'BROWN_MUITO_COMPLEXO',
        'BEIGE_MUITO_COMPLEXO',
        'YELLOW_MUITO_COMPLEXO',
        'ORANGE_MUITO_COMPLEXO',
        'PURPLE_MUITO_COMPLEXO',
        'VIOLET_MUITO_COMPLEXO',
        'INDIGO_MUITO_COMPLEXO',
        'TURQUOISE',
        'MAGENTA',
        'CYAN_MUITO_COMPLEXO',
        'LAVENDER',
        'SALMON_MUITO_COMPLEXO',
        'CREAM_MUITO_COMPLEXO',
        'BURGUNDY',
        'CARMINE',
        'SCARLET',
        'RUBY_MUITO_COMPLEXO',
        'EMERALD',
        'JADE_MUITO_COMPLEXO',
        'TOURMALINE',
        'SAPPHIRE',
        'DIAMOND',
        'BLUE_LIGHT',
        'BLUE_DARK',
        'BLUE_NAVY',
        'BLUE_SKY',
      ],
      foods: [
        'APPLE_MUITO_COMPLEXO',
        'BREAD_MUITO_COMPLEXO',
        'EGG_MUITO_COMPLEXO',
        'CAKE_MUITO_COMPLEXO',
        'SOUP_MUITO_COMPLEXO',
        'RICE_MUITO_COMPLEXO',
        'FISH_MUITO_COMPLEXO',
        'MEAT_MUITO_COMPLEXO',
        'CORN_MUITO_COMPLEXO',
        'BEANS_MUITO_COMPLEXO',
        'PASTA_MUITO_COMPLEXO',
        'CHEESE_MUITO_COMPLEXO',
        'BANANA_MUITO_COMPLEXO',
        'ORANGE_MUITO_COMPLEXO',
        'GRAPE_MUITO_COMPLEXO',
        'PEAR_MUITO_COMPLEXO',
        'STRAWBERRY',
        'PINEAPPLE',
        'WATERMELON',
        'PAPAYA_MUITO_COMPLEXO',
        'GUAVA_MUITO_COMPLEXO',
        'MANGO_MUITO_COMPLEXO',
        'AVOCADO',
        'LEMON_MUITO_COMPLEXO',
        'TANGERINE',
        'PEACH_MUITO_COMPLEXO',
        'PLUM_MUITO_COMPLEXO',
        'CHERRY_MUITO_COMPLEXO',
        'RASPBERRY',
        'BLUEBERRY',
      ],
      technology: [
        'COMPUTER',
        'PHONE_MUITO_COMPLEXO',
        'INTERNET',
        'EMAIL_MUITO_COMPLEXO',
        'WEBSITE',
        'PROGRAM',
        'FILE_MUITO_COMPLEXO',
        'DATA_MUITO_COMPLEXO',
        'NETWORK',
        'SYSTEM_MUITO_COMPLEXO',
        'CODE_MUITO_COMPLEXO',
        'PASSWORD',
        'LOGIN_MUITO_COMPLEXO',
        'SMARTPHONE',
        'TABLET_MUITO_COMPLEXO',
        'LAPTOP_MUITO_COMPLEXO',
        'NOTEBOOK',
        'DESKTOP',
        'SERVER_MUITO_COMPLEXO',
        'ROUTER_MUITO_COMPLEXO',
        'MODEM_MUITO_COMPLEXO',
        'CABLE_MUITO_COMPLEXO',
        'WIFI_MUITO_COMPLEXO',
        'BLUETOOTH',
        'USB_MUITO_COMPLEXO',
        'HDMI_MUITO_COMPLEXO',
        'MONITOR',
        'KEYBOARD',
        'MOUSE_MUITO_COMPLEXO',
        'PRINTER',
        'COMPUTER_PERSONAL',
        'COMPUTER_LAPTOP',
        'COMPUTER_DESKTOP',
      ],
      professions: [
        'DOCTOR_MUITO_COMPLEXO',
        'TEACHER',
        'ENGINEER',
        'LAWYER_MUITO_COMPLEXO',
        'DENTIST',
        'VETERINARIAN',
        'ARCHITECT',
        'PHARMACIST',
        'NURSE_MUITO_COMPLEXO',
        'PSYCHOLOGIST',
        'PEDAGOGUE',
        'PHYSIOTHERAPIST',
        'SPEECH_THERAPIST',
        'OCCUPATIONAL_THERAPIST',
        'NUTRITIONIST',
        'BIOCHEMIST',
        'BIOLOGIST',
        'CHEMIST',
        'PHYSICIST',
        'MATHEMATICIAN',
        'STATISTICIAN',
        'ECONOMIST',
        'ADMINISTRATOR',
        'ACCOUNTANT',
        'AUDITOR',
        'ANALYST',
        'PROGRAMMER',
        'DEVELOPER',
        'SYSTEMS_ANALYST',
        'NETWORK_ADMINISTRATOR',
        'IT_TECHNICIAN',
        'DOCTOR_GENERAL',
        'DOCTOR_SPECIALIST',
        'DOCTOR_RESIDENT',
        'PHYSICIAN',
        'SURGEON',
      ],
      sports: [
        'FOOTBALL',
        'BASKETBALL',
        'TENNIS_MUITO_COMPLEXO',
        'SWIMMING',
        'VOLLEYBALL',
        'ATHLETICS',
        'GYMNASTICS',
        'SURFING',
        'SKATEBOARDING',
        'CYCLING',
        'HANDBALL',
        'RUGBY_MUITO_COMPLEXO',
        'BADMINTON',
        'SQUASH_MUITO_COMPLEXO',
        'FENCING',
        'SHOOTING',
        'CANOEING',
        'ROWING_MUITO_COMPLEXO',
        'TRIATHLON',
        'MARATHON',
        'RUNNING',
        'JUMPING',
        'THROWING',
        'DARTS_MUITO_COMPLEXO',
        'BOWLING',
        'SNOOKER',
        'BILLIARDS',
        'PING_PONG',
        'TABLE_TENNIS',
      ],
      music: [
        'PIANO_MUITO_COMPLEXO',
        'GUITAR_MUITO_COMPLEXO',
        'DRUMS_MUITO_COMPLEXO',
        'FLUTE_MUITO_COMPLEXO',
        'SAXOPHONE',
        'TRUMPET',
        'CLARINET',
        'HARP_MUITO_COMPLEXO',
        'ACCORDION',
        'KEYBOARD',
        'VIOLIN_MUITO_COMPLEXO',
        'VIOLA_MUITO_COMPLEXO',
        'CELLO_MUITO_COMPLEXO',
        'DOUBLE_BASS',
        'TROMBONE',
        'TUBA_MUITO_COMPLEXO',
        'BASSOON',
        'OBOE_MUITO_COMPLEXO',
        'FRENCH_HORN',
        'TIMPANI',
        'TRIANGLE',
        'XYLOPHONE',
        'VIBRAPHONE',
        'MARIMBA',
        'GLOCKENSPIEL',
        'CELESTA',
        'ORGAN_MUITO_COMPLEXO',
        'SYNTHESIZER',
        'ELECTRIC_GUITAR',
        'ELECTRIC_BASS',
        'PIANO_ELECTRIC',
        'PIANO_ACOUSTIC',
        'PIANO_DIGITAL',
      ],
      nature: [
        'TREE_MUITO_COMPLEXO',
        'FLOWER_MUITO_COMPLEXO',
        'MOUNTAIN',
        'RIVER_MUITO_COMPLEXO',
        'OCEAN_MUITO_COMPLEXO',
        'FOREST_MUITO_COMPLEXO',
        'BEACH_MUITO_COMPLEXO',
        'DESERT_MUITO_COMPLEXO',
        'WATERFALL',
        'VOLCANO',
        'LAKE_MUITO_COMPLEXO',
        'LAGOON_MUITO_COMPLEXO',
        'CASCADE',
        'RANGE_MUITO_COMPLEXO',
        'HILL_MUITO_COMPLEXO',
        'VALLEY_MUITO_COMPLEXO',
        'CANYON_MUITO_COMPLEXO',
        'CAVE_MUITO_COMPLEXO',
        'GROTTO_MUITO_COMPLEXO',
        'HOLE_MUITO_COMPLEXO',
        'PIT_MUITO_COMPLEXO',
        'ABYSS_MUITO_COMPLEXO',
        'PRECIPICE',
        'CLIFF_MUITO_COMPLEXO',
        'ROCK_MUITO_COMPLEXO',
        'STONE_MUITO_COMPLEXO',
        'SAND_MUITO_COMPLEXO',
        'EARTH_MUITO_COMPLEXO',
        'CLAY_MUITO_COMPLEXO',
        'MUD_MUITO_COMPLEXO',
      ],
    },
  },
  es: {
    easy: {
      animals: [
        'GATO',
        'PERRO',
        'PAJARO',
        'PEZ',
        'OSO',
        'PATO',
        'RANA',
        'CIERVO',
        'ZORRO',
        'ABEJA',
        'HORMIGA',
        'RATA',
        'MURCIELAGO',
        'VACA',
        'CABALLO',
        'CERDO',
        'OVEJA',
        'CABRA',
        'BURRO',
        'MONO',
        'TIGRE',
        'LEON',
        'ELEFANTE',
        'JIRAFA',
        'CEBRA',
        'LOBO',
        'BUHO',
        'AGUILA',
        'HALCON',
        'PALOMA',
        'GOLONDRINA',
        'MARIPOSA',
        'GATITO',
        'GATON',
        'FELINO',
        'MININO',
        'MIAU',
        'BIGOTES',
        'COLA',
        'PATAS',
      ],
      colors: [
        'ROJO',
        'AZUL',
        'VERDE',
        'ROSA',
        'ORO',
        'GRIS',
        'NEGRO',
        'BLANCO',
        'CAFE',
        'BEIGE',
        'AMARILLO',
        'NARANJA',
        'MORADO',
        'VIOLETA',
        'INDIGO',
        'TURQUESA',
        'MAGENTA',
        'CIAN',
        'LAVANDA',
        'SALMON',
        'CREMA',
        'BURGUNDY',
        'CARMESIN',
        'ESCARLATA',
        'RUBI',
        'ESMERALDA',
        'JADE',
        'TURMALINA',
        'ZAFIRO',
        'DIAMANTE',
        'AZUL_CLARO',
        'AZUL_OSCURO',
        'AZUL_MARINO',
        'AZUL_CIELO',
      ],
      foods: [
        'MANZANA',
        'PAN',
        'HUEVO',
        'PASTEL',
        'SOPA',
        'ARROZ',
        'PESCADO',
        'CARNE',
        'MAIZ',
        'QUESO',
        'PLATANO',
        'NARANJA',
        'UVA',
        'PERA',
        'FRESA',
        'PINA',
        'SANDIA',
        'PAPAYA',
        'GUAYABA',
        'MANGO',
        'AGUACATE',
        'LIMON',
        'MANDARINA',
        'MELOCOTON',
        'CIRUELA',
        'CEREZA',
        'FRAMBUESA',
        'ARANDANO',
        'MORA',
        'KIWI',
      ],
      technology: [
        'COMPUTADORA',
        'TELEFONO',
        'INTERNET',
        'CORREO',
        'SITIO_WEB',
        'PROGRAMA',
        'ARCHIVO',
        'DATOS',
        'RED',
        'SISTEMA',
        'CODIGO',
        'CONTRASE√ëA',
        'INICIO_SESION',
        'SMARTPHONE',
        'TABLET',
        'LAPTOP',
        'NOTEBOOK',
        'DESKTOP',
        'SERVIDOR',
        'ENRUTADOR',
        'MODEM',
        'CABLE',
        'WIFI',
        'BLUETOOTH',
        'USB',
        'HDMI',
        'MONITOR',
        'TECLADO',
        'RATON',
        'IMPRESORA',
        'COMPUTADORA_PERSONAL',
        'COMPUTADORA_PORTATIL',
        'COMPUTADORA_ESCRITORIO',
      ],
      professions: [
        'MEDICO',
        'PROFESOR',
        'INGENIERO',
        'ABOGADO',
        'DENTISTA',
        'VETERINARIO',
        'ARQUITECTO',
        'FARMACEUTICO',
        'ENFERMERO',
        'PSICOLOGO',
        'PEDAGOGO',
        'FISIOTERAPEUTA',
        'FONOAUDIOLOGO',
        'TERAPEUTA_OCUPACIONAL',
        'NUTRICIONISTA',
        'BIOQUIMICO',
        'BIOLOGO',
        'QUIMICO',
        'FISICO',
        'MATEMATICO',
        'ESTADISTICO',
        'ECONOMISTA',
        'ADMINISTRADOR',
        'CONTADOR',
        'AUDITOR',
        'ANALISTA',
        'PROGRAMADOR',
        'DESARROLLADOR',
        'ANALISTA_DE_SISTEMAS',
        'ADMINISTRADOR_DE_REDES',
        'TECNICO_DE_INFORMATICA',
        'MEDICO_GENERAL',
        'MEDICO_ESPECIALISTA',
        'MEDICO_RESIDENTE',
        'CLINICO',
        'CIRUJANO',
      ],
      sports: [
        'FUTBOL',
        'BALONCESTO',
        'TENIS',
        'NATACION',
        'VOLEIBOL',
        'ATLETISMO',
        'GIMNASIA',
        'SURF',
        'SKATE',
        'CICLISMO',
        'BALONMANO',
        'RUGBY',
        'BADMINTON',
        'SQUASH',
        'ESGRIMA',
        'TIRO',
        'CANOTAJE',
        'REMO',
        'TRIATLON',
        'MARATON',
        'CARRERA',
        'SALTO',
        'LANZAMIENTO',
        'DARDO',
        'BOLICHE',
        'SINUCA',
        'BILLAR',
        'PING_PONG',
        'TENIS_MESA',
      ],
      music: [
        'PIANO',
        'GUITARRA',
        'BATERIA',
        'FLAUTA',
        'SAXOFON',
        'TROMPETA',
        'CLARINETE',
        'ARPA',
        'ACORDEON',
        'TECLADO',
        'VIOLIN',
        'VIOLA',
        'VIOLONCHELO',
        'CONTRABAJO',
        'TROMBON',
        'TUBA',
        'FAGOT',
        'OBOE',
        'CORNO',
        'TIMPANI',
        'TRIANGULO',
        'XILOFONO',
        'VIBRAFONO',
        'MARIMBA',
        'GLOCKENSPIEL',
        'CELESTA',
        'ORGANO',
        'SINTETIZADOR',
        'GUITARRA_ELECTRICA',
        'BAJO_ELECTRICO',
        'PIANO_ELECTRICO',
        'PIANO_ACUSTICO',
        'PIANO_DIGITAL',
      ],
      nature: [
        'ARBOL',
        'FLOR',
        'MONTA√ëA',
        'RIO',
        'OCEANO',
        'BOSQUE',
        'PLAYA',
        'DESIERTO',
        'CASCADA',
        'VOLCAN',
        'LAGO',
        'LAGUNA',
        'SIERRA',
        'COLINA',
        'VALLE',
        'CANON',
        'CUEVA',
        'GRUTA',
        'AGUJERO',
        'FOSA',
        'ABISMO',
        'PRECIPICIO',
        'ACANTILADO',
        'ROCA',
        'PIEDRA',
        'ARENA',
        'TIERRA',
        'ARCILLA',
        'BARRO',
      ],
    },
    medium: {
      animals: [
        'GATO_COMPLEXO',
        'PERRO',
        'PAJARO',
        'PEZ_COMPLEXO',
        'OSO_COMPLEXO',
        'PATO_COMPLEXO',
        'RANA_COMPLEXO',
        'CIERVO',
        'ZORRO',
        'ABEJA',
        'HORMIGA',
        'RATA_COMPLEXO',
        'MURCIELAGO',
        'VACA_COMPLEXO',
        'CABALLO',
        'CERDO',
        'OVEJA',
        'CABRA',
        'BURRO',
        'MONO_COMPLEXO',
        'TIGRE',
        'LEON_COMPLEXO',
        'ELEFANTE',
        'JIRAFA',
        'CEBRA',
        'LOBO_COMPLEXO',
        'BUHO_COMPLEXO',
        'AGUILA',
        'HALCON',
        'PALOMA',
        'GOLONDRINA',
        'MARIPOSA',
        'GATITO',
        'GATON',
        'FELINO',
        'MININO',
        'MIAU_COMPLEXO',
        'BIGOTES',
        'COLA_COMPLEXO',
        'PATAS',
      ],
      colors: [
        'ROJO_COMPLEXO',
        'AZUL_COMPLEXO',
        'VERDE',
        'ROSA_COMPLEXO',
        'ORO_COMPLEXO',
        'GRIS_COMPLEXO',
        'NEGRO',
        'BLANCO',
        'CAFE_COMPLEXO',
        'BEIGE',
        'AMARILLO',
        'NARANJA',
        'MORADO',
        'VIOLETA',
        'INDIGO',
        'TURQUESA',
        'MAGENTA',
        'CIAN_COMPLEXO',
        'LAVANDA',
        'SALMON',
        'CREMA',
        'BURGUNDY',
        'CARMESIN',
        'ESCARLATA',
        'RUBI_COMPLEXO',
        'ESMERALDA',
        'JADE_COMPLEXO',
        'TURMALINA',
        'ZAFIRO',
        'DIAMANTE',
        'AZUL_CLARO',
        'AZUL_OSCURO',
        'AZUL_MARINO',
        'AZUL_CIELO',
      ],
      foods: [
        'MANZANA',
        'PAN_COMPLEXO',
        'HUEVO',
        'PASTEL',
        'SOPA_COMPLEXO',
        'ARROZ',
        'PESCADO',
        'CARNE',
        'MAIZ_COMPLEXO',
        'QUESO',
        'PLATANO',
        'NARANJA',
        'UVA_COMPLEXO',
        'PERA_COMPLEXO',
        'FRESA',
        'PINA_COMPLEXO',
        'SANDIA',
        'PAPAYA',
        'GUAYABA',
        'MANGO',
        'AGUACATE',
        'LIMON',
        'MANDARINA',
        'MELOCOTON',
        'CIRUELA',
        'CEREZA',
        'FRAMBUESA',
        'ARANDANO',
        'MORA_COMPLEXO',
        'KIWI_COMPLEXO',
      ],
      technology: [
        'COMPUTADORA',
        'TELEFONO',
        'INTERNET',
        'CORREO',
        'SITIO_WEB',
        'PROGRAMA',
        'ARCHIVO',
        'DATOS',
        'RED_COMPLEXO',
        'SISTEMA',
        'CODIGO',
        'CONTRASE√ëA',
        'INICIO_SESION',
        'SMARTPHONE',
        'TABLET',
        'LAPTOP',
        'NOTEBOOK',
        'DESKTOP',
        'SERVIDOR',
        'ENRUTADOR',
        'MODEM',
        'CABLE',
        'WIFI_COMPLEXO',
        'BLUETOOTH',
        'USB_COMPLEXO',
        'HDMI_COMPLEXO',
        'MONITOR',
        'TECLADO',
        'RATON',
        'IMPRESORA',
        'COMPUTADORA_PERSONAL',
        'COMPUTADORA_PORTATIL',
        'COMPUTADORA_ESCRITORIO',
      ],
      professions: [
        'MEDICO',
        'PROFESOR',
        'INGENIERO',
        'ABOGADO',
        'DENTISTA',
        'VETERINARIO',
        'ARQUITECTO',
        'FARMACEUTICO',
        'ENFERMERO',
        'PSICOLOGO',
        'PEDAGOGO',
        'FISIOTERAPEUTA',
        'FONOAUDIOLOGO',
        'TERAPEUTA_OCUPACIONAL',
        'NUTRICIONISTA',
        'BIOQUIMICO',
        'BIOLOGO',
        'QUIMICO',
        'FISICO',
        'MATEMATICO',
        'ESTADISTICO',
        'ECONOMISTA',
        'ADMINISTRADOR',
        'CONTADOR',
        'AUDITOR',
        'ANALISTA',
        'PROGRAMADOR',
        'DESARROLLADOR',
        'ANALISTA_DE_SISTEMAS',
        'ADMINISTRADOR_DE_REDES',
        'TECNICO_DE_INFORMATICA',
        'MEDICO_GENERAL',
        'MEDICO_ESPECIALISTA',
        'MEDICO_RESIDENTE',
        'CLINICO',
        'CIRUJANO',
      ],
      sports: [
        'FUTBOL',
        'BALONCESTO',
        'TENIS',
        'NATACION',
        'VOLEIBOL',
        'ATLETISMO',
        'GIMNASIA',
        'SURF_COMPLEXO',
        'SKATE',
        'CICLISMO',
        'BALONMANO',
        'RUGBY',
        'BADMINTON',
        'SQUASH',
        'ESGRIMA',
        'TIRO_COMPLEXO',
        'CANOTAJE',
        'REMO_COMPLEXO',
        'TRIATLON',
        'MARATON',
        'CARRERA',
        'SALTO',
        'LANZAMIENTO',
        'DARDO',
        'BOLICHE',
        'SINUCA',
        'BILLAR',
        'PING_PONG',
        'TENIS_MESA',
      ],
      music: [
        'PIANO',
        'GUITARRA',
        'BATERIA',
        'FLAUTA',
        'SAXOFON',
        'TROMPETA',
        'CLARINETE',
        'ARPA_COMPLEXO',
        'ACORDEON',
        'TECLADO',
        'VIOLIN',
        'VIOLA',
        'VIOLONCHELO',
        'CONTRABAJO',
        'TROMBON',
        'TUBA_COMPLEXO',
        'FAGOT',
        'OBOE_COMPLEXO',
        'CORNO',
        'TIMPANI',
        'TRIANGULO',
        'XILOFONO',
        'VIBRAFONO',
        'MARIMBA',
        'GLOCKENSPIEL',
        'CELESTA',
        'ORGANO',
        'SINTETIZADOR',
        'GUITARRA_ELECTRICA',
        'BAJO_ELECTRICO',
        'PIANO_ELECTRICO',
        'PIANO_ACUSTICO',
        'PIANO_DIGITAL',
      ],
      nature: [
        'ARBOL',
        'FLOR_COMPLEXO',
        'MONTA√ëA',
        'RIO_COMPLEXO',
        'OCEANO',
        'BOSQUE',
        'PLAYA',
        'DESIERTO',
        'CASCADA',
        'VOLCAN',
        'LAGO_COMPLEXO',
        'LAGUNA',
        'SIERRA',
        'COLINA',
        'VALLE',
        'CANON',
        'CUEVA',
        'GRUTA',
        'AGUJERO',
        'FOSA_COMPLEXO',
        'ABISMO',
        'PRECIPICIO',
        'ACANTILADO',
        'ROCA_COMPLEXO',
        'PIEDRA',
        'ARENA',
        'TIERRA',
        'ARCILLA',
        'BARRO',
      ],
    },
    hard: {
      animals: [
        'GATO_MUITO_COMPLEXO',
        'PERRO_MUITO_COMPLEXO',
        'PAJARO_MUITO_COMPLEXO',
        'PEZ_MUITO_COMPLEXO',
        'OSO_MUITO_COMPLEXO',
        'PATO_MUITO_COMPLEXO',
        'RANA_MUITO_COMPLEXO',
        'CIERVO_MUITO_COMPLEXO',
        'ZORRO_MUITO_COMPLEXO',
        'ABEJA_MUITO_COMPLEXO',
        'HORMIGA',
        'RATA_MUITO_COMPLEXO',
        'MURCIELAGO',
        'VACA_MUITO_COMPLEXO',
        'CABALLO',
        'CERDO_MUITO_COMPLEXO',
        'OVEJA_MUITO_COMPLEXO',
        'CABRA_MUITO_COMPLEXO',
        'BURRO_MUITO_COMPLEXO',
        'MONO_MUITO_COMPLEXO',
        'TIGRE_MUITO_COMPLEXO',
        'LEON_MUITO_COMPLEXO',
        'ELEFANTE',
        'JIRAFA_MUITO_COMPLEXO',
        'CEBRA_MUITO_COMPLEXO',
        'LOBO_MUITO_COMPLEXO',
        'BUHO_MUITO_COMPLEXO',
        'AGUILA_MUITO_COMPLEXO',
        'HALCON_MUITO_COMPLEXO',
        'PALOMA_MUITO_COMPLEXO',
        'GOLONDRINA',
        'MARIPOSA',
        'GATITO_MUITO_COMPLEXO',
        'GATON_MUITO_COMPLEXO',
        'FELINO_MUITO_COMPLEXO',
        'MININO_MUITO_COMPLEXO',
        'MIAU_MUITO_COMPLEXO',
        'BIGOTES',
        'COLA_MUITO_COMPLEXO',
        'PATAS_MUITO_COMPLEXO',
      ],
      colors: [
        'ROJO_MUITO_COMPLEXO',
        'AZUL_MUITO_COMPLEXO',
        'VERDE_MUITO_COMPLEXO',
        'ROSA_MUITO_COMPLEXO',
        'ORO_MUITO_COMPLEXO',
        'GRIS_MUITO_COMPLEXO',
        'NEGRO_MUITO_COMPLEXO',
        'BLANCO_MUITO_COMPLEXO',
        'CAFE_MUITO_COMPLEXO',
        'BEIGE_MUITO_COMPLEXO',
        'AMARILLO',
        'NARANJA',
        'MORADO_MUITO_COMPLEXO',
        'VIOLETA',
        'INDIGO_MUITO_COMPLEXO',
        'TURQUESA',
        'MAGENTA',
        'CIAN_MUITO_COMPLEXO',
        'LAVANDA',
        'SALMON_MUITO_COMPLEXO',
        'CREMA_MUITO_COMPLEXO',
        'BURGUNDY',
        'CARMESIN',
        'ESCARLATA',
        'RUBI_MUITO_COMPLEXO',
        'ESMERALDA',
        'JADE_MUITO_COMPLEXO',
        'TURMALINA',
        'ZAFIRO_MUITO_COMPLEXO',
        'DIAMANTE',
        'AZUL_CLARO',
        'AZUL_OSCURO',
        'AZUL_MARINO',
        'AZUL_CIELO',
      ],
      foods: [
        'MANZANA',
        'PAN_MUITO_COMPLEXO',
        'HUEVO_MUITO_COMPLEXO',
        'PASTEL_MUITO_COMPLEXO',
        'SOPA_MUITO_COMPLEXO',
        'ARROZ_MUITO_COMPLEXO',
        'PESCADO',
        'CARNE_MUITO_COMPLEXO',
        'MAIZ_MUITO_COMPLEXO',
        'QUESO_MUITO_COMPLEXO',
        'PLATANO',
        'NARANJA',
        'UVA_MUITO_COMPLEXO',
        'PERA_MUITO_COMPLEXO',
        'FRESA_MUITO_COMPLEXO',
        'PINA_MUITO_COMPLEXO',
        'SANDIA_MUITO_COMPLEXO',
        'PAPAYA_MUITO_COMPLEXO',
        'GUAYABA',
        'MANGO_MUITO_COMPLEXO',
        'AGUACATE',
        'LIMON_MUITO_COMPLEXO',
        'MANDARINA',
        'MELOCOTON',
        'CIRUELA',
        'CEREZA_MUITO_COMPLEXO',
        'FRAMBUESA',
        'ARANDANO',
        'MORA_MUITO_COMPLEXO',
        'KIWI_MUITO_COMPLEXO',
      ],
      technology: [
        'COMPUTADORA',
        'TELEFONO',
        'INTERNET',
        'CORREO_MUITO_COMPLEXO',
        'SITIO_WEB',
        'PROGRAMA',
        'ARCHIVO',
        'DATOS_MUITO_COMPLEXO',
        'RED_MUITO_COMPLEXO',
        'SISTEMA',
        'CODIGO_MUITO_COMPLEXO',
        'CONTRASE√ëA',
        'INICIO_SESION',
        'SMARTPHONE',
        'TABLET_MUITO_COMPLEXO',
        'LAPTOP_MUITO_COMPLEXO',
        'NOTEBOOK',
        'DESKTOP',
        'SERVIDOR',
        'ENRUTADOR',
        'MODEM_MUITO_COMPLEXO',
        'CABLE_MUITO_COMPLEXO',
        'WIFI_MUITO_COMPLEXO',
        'BLUETOOTH',
        'USB_MUITO_COMPLEXO',
        'HDMI_MUITO_COMPLEXO',
        'MONITOR',
        'TECLADO',
        'RATON_MUITO_COMPLEXO',
        'IMPRESORA',
        'COMPUTADORA_PERSONAL',
        'COMPUTADORA_PORTATIL',
        'COMPUTADORA_ESCRITORIO',
      ],
      professions: [
        'MEDICO_MUITO_COMPLEXO',
        'PROFESOR',
        'INGENIERO',
        'ABOGADO',
        'DENTISTA',
        'VETERINARIO',
        'ARQUITECTO',
        'FARMACEUTICO',
        'ENFERMERO',
        'PSICOLOGO',
        'PEDAGOGO',
        'FISIOTERAPEUTA',
        'FONOAUDIOLOGO',
        'TERAPEUTA_OCUPACIONAL',
        'NUTRICIONISTA',
        'BIOQUIMICO',
        'BIOLOGO',
        'QUIMICO',
        'FISICO_MUITO_COMPLEXO',
        'MATEMATICO',
        'ESTADISTICO',
        'ECONOMISTA',
        'ADMINISTRADOR',
        'CONTADOR',
        'AUDITOR',
        'ANALISTA',
        'PROGRAMADOR',
        'DESARROLLADOR',
        'ANALISTA_DE_SISTEMAS',
        'ADMINISTRADOR_DE_REDES',
        'TECNICO_DE_INFORMATICA',
        'MEDICO_GENERAL',
        'MEDICO_ESPECIALISTA',
        'MEDICO_RESIDENTE',
        'CLINICO',
        'CIRUJANO',
      ],
      sports: [
        'FUTBOL_MUITO_COMPLEXO',
        'BALONCESTO',
        'TENIS_MUITO_COMPLEXO',
        'NATACION',
        'VOLEIBOL',
        'ATLETISMO',
        'GIMNASIA',
        'SURF_MUITO_COMPLEXO',
        'SKATE_MUITO_COMPLEXO',
        'CICLISMO',
        'BALONMANO',
        'RUGBY_MUITO_COMPLEXO',
        'BADMINTON',
        'SQUASH_MUITO_COMPLEXO',
        'ESGRIMA',
        'TIRO_MUITO_COMPLEXO',
        'CANOTAJE',
        'REMO_MUITO_COMPLEXO',
        'TRIATLON',
        'MARATON',
        'CARRERA',
        'SALTO_MUITO_COMPLEXO',
        'LANZAMIENTO',
        'DARDO_MUITO_COMPLEXO',
        'BOLICHE',
        'SINUCA_MUITO_COMPLEXO',
        'BILLAR_MUITO_COMPLEXO',
        'PING_PONG',
        'TENIS_MESA',
      ],
      music: [
        'PIANO_MUITO_COMPLEXO',
        'GUITARRA',
        'BATERIA',
        'FLAUTA_MUITO_COMPLEXO',
        'SAXOFON',
        'TROMPETA',
        'CLARINETE',
        'ARPA_MUITO_COMPLEXO',
        'ACORDEON',
        'TECLADO',
        'VIOLIN_MUITO_COMPLEXO',
        'VIOLA_MUITO_COMPLEXO',
        'VIOLONCHELO',
        'CONTRABAJO',
        'TROMBON',
        'TUBA_MUITO_COMPLEXO',
        'FAGOT_MUITO_COMPLEXO',
        'OBOE_MUITO_COMPLEXO',
        'CORNO_MUITO_COMPLEXO',
        'TIMPANI',
        'TRIANGULO',
        'XILOFONO',
        'VIBRAFONO',
        'MARIMBA',
        'GLOCKENSPIEL',
        'CELESTA',
        'ORGANO_MUITO_COMPLEXO',
        'SINTETIZADOR',
        'GUITARRA_ELECTRICA',
        'BAJO_ELECTRICO',
        'PIANO_ELECTRICO',
        'PIANO_ACUSTICO',
        'PIANO_DIGITAL',
      ],
      nature: [
        'ARBOL_MUITO_COMPLEXO',
        'FLOR_MUITO_COMPLEXO',
        'MONTA√ëA',
        'RIO_MUITO_COMPLEXO',
        'OCEANO_MUITO_COMPLEXO',
        'BOSQUE_MUITO_COMPLEXO',
        'PLAYA_MUITO_COMPLEXO',
        'DESIERTO',
        'CASCADA',
        'VOLCAN_MUITO_COMPLEXO',
        'LAGO_MUITO_COMPLEXO',
        'LAGUNA_MUITO_COMPLEXO',
        'SIERRA_MUITO_COMPLEXO',
        'COLINA_MUITO_COMPLEXO',
        'VALLE_MUITO_COMPLEXO',
        'CANON_MUITO_COMPLEXO',
        'CUEVA_MUITO_COMPLEXO',
        'GRUTA_MUITO_COMPLEXO',
        'AGUJERO',
        'FOSA_MUITO_COMPLEXO',
        'ABISMO_MUITO_COMPLEXO',
        'PRECIPICIO',
        'ACANTILADO',
        'ROCA_MUITO_COMPLEXO',
        'PIEDRA_MUITO_COMPLEXO',
        'ARENA_MUITO_COMPLEXO',
        'TIERRA_MUITO_COMPLEXO',
        'ARCILLA',
        'BARRO_MUITO_COMPLEXO',
      ],
    },
  },
};

const UI_TRANSLATIONS = {
  pt: {
    title: 'Ca√ßa-Palavras',
    gridSize: 'Tamanho do Grid',
    wordDifficulty: 'Dificuldade das Palavras',
    category: 'Categoria',
    language: 'Idioma',
    newGame: 'Novo Jogo',
    found: 'Encontradas',
    timeElapsed: 'Tempo',
    clickToStart: 'Clique para come√ßar',
    ttsEnabled: 'Falar palavras',
    settings: 'Configura√ß√µes',
    share: 'Compartilhar',
    congratulations: 'Parab√©ns!',
    gameCompleted: 'Voc√™ completou o puzzle!',
    gridSizes: {
      small: 'Pequeno (10x12)',
      medium: 'M√©dio (12x15)',
      large: 'Grande (14x18)',
    },
    wordDifficulties: { easy: 'F√°cil', medium: 'M√©dio', hard: 'Dif√≠cil' },
    wordDifficultyDescriptions: {
      easy: 'Palavras simples e comuns',
      medium: 'Palavras de complexidade moderada',
      hard: 'Palavras complexas e longas',
    },
    categories: {
      animals: 'Animais',
      colors: 'Cores',
      foods: 'Comidas',
      technology: 'Tecnologia',
      professions: 'Profiss√µes',
      sports: 'Esportes',
      music: 'M√∫sica',
      nature: 'Natureza',
    },
    statistics: 'Estat√≠sticas',
    achievements: 'Conquistas',
    totalGames: 'Jogos Totais',
    wordsFound: 'Palavras Encontradas',
    bestTime: 'Melhor Tempo',
    maxStreak: 'Sequ√™ncia M√°xima',
    moreAchievements: 'mais conquistas',
    shareText: {
      played: 'Joguei Ca√ßa-Palavras no GSL Game Zone!',
      result: 'Resultado',
      wordsFound: 'palavras encontradas',
      time: 'Tempo',
      score: 'Pontua√ß√£o',
      points: 'pontos',
    },
  },
  en: {
    title: 'Word Search',
    gridSize: 'Grid Size',
    wordDifficulty: 'Word Difficulty',
    category: 'Category',
    language: 'Language',
    newGame: 'New Game',
    found: 'Found',
    timeElapsed: 'Time',
    clickToStart: 'Click to start',
    ttsEnabled: 'Speak words',
    settings: 'Settings',
    share: 'Share',
    congratulations: 'Congratulations!',
    gameCompleted: 'You completed the puzzle!',
    gridSizes: {
      small: 'Small (10x12)',
      medium: 'Medium (12x15)',
      large: 'Large (14x18)',
    },
    wordDifficulties: { easy: 'Easy', medium: 'Medium', hard: 'Hard' },
    wordDifficultyDescriptions: {
      easy: 'Simple and common words',
      medium: 'Moderate complexity words',
      hard: 'Complex and long words',
    },
    categories: {
      animals: 'Animals',
      colors: 'Colors',
      foods: 'Foods',
      technology: 'Technology',
      professions: 'Professions',
      sports: 'Sports',
      music: 'Music',
      nature: 'Nature',
    },
    statistics: 'Statistics',
    achievements: 'Achievements',
    totalGames: 'Total Games',
    wordsFound: 'Words Found',
    bestTime: 'Best Time',
    maxStreak: 'Max Streak',
    moreAchievements: 'more achievements',
    shareText: {
      played: 'I played Word Search in GSL Game Zone!',
      result: 'Result',
      wordsFound: 'words found',
      time: 'Time',
      score: 'Score',
      points: 'points',
    },
  },
  es: {
    title: 'Sopa de Letras',
    gridSize: 'Tama√±o de Cuadr√≠cula',
    wordDifficulty: 'Dificultad de Palabras',
    category: 'Categor√≠a',
    language: 'Idioma',
    newGame: 'Nuevo Juego',
    found: 'Encontradas',
    timeElapsed: 'Tiempo',
    clickToStart: 'Haz clic para empezar',
    ttsEnabled: 'Hablar palabras',
    settings: 'Configuraci√≥n',
    share: 'Compartir',
    congratulations: '¬°Felicitaciones!',
    gameCompleted: '¬°Completaste el puzzle!',
    gridSizes: {
      small: 'Peque√±o (10x12)',
      medium: 'Mediano (12x15)',
      large: 'Grande (14x18)',
    },
    wordDifficulties: { easy: 'F√°cil', medium: 'Medio', hard: 'Dif√≠cil' },
    wordDifficultyDescriptions: {
      easy: 'Palavras simples y comunes',
      medium: 'Palavras de complejidad moderada',
      hard: 'Palavras complejas y largas',
    },
    categories: {
      animals: 'Animales',
      colors: 'Colores',
      foods: 'Comidas',
      technology: 'Tecnolog√≠a',
      professions: 'Profesiones',
      sports: 'Deportes',
      music: 'M√∫sica',
      nature: 'Naturaleza',
    },
    statistics: 'Estad√≠sticas',
    achievements: 'Logros',
    totalGames: 'Juegos Totales',
    wordsFound: 'Palabras Encontradas',
    bestTime: 'Mejor Tiempo',
    maxStreak: 'Secuencia M√°xima',
    moreAchievements: 'm√°s logros',
    shareText: {
      played: '¬°Jugu√© Sopa de Letras en GSL Game Zone!',
      result: 'Resultado',
      wordsFound: 'palabras encontradas',
      time: 'Tiempo',
      score: 'Puntuaci√≥n',
      points: 'puntos',
    },
  },
};

// ===== UTILITY FUNCTIONS =====
const seededRandom = (seed: number): number => {
  const x = Math.sin(seed++) * 10000;
  return x - Math.floor(x);
};

const formatTime = (seconds: number): string => {
  const mins = Math.floor(seconds / 60);
  const secs = seconds % 60;
  return mins + ':' + (secs < 10 ? '0' : '') + secs;
};

const shuffleArray = <T,>(array: T[], seed: number): T[] => {
  return [...new Set(array)].sort(() => seededRandom(seed++) - 0.5);
};

const canPlaceWord = (
  grid: string[][],
  word: string,
  row: number,
  col: number,
  direction: [number, number],
  cols: number,
  rows: number
): boolean => {
  for (let i = 0; i < word.length; i++) {
    const newRow = row + direction[0] * i;
    const newCol = col + direction[1] * i;
    if (newRow < 0 || newRow >= rows || newCol < 0 || newCol >= cols)
      return false;
    if (grid[newRow][newCol] !== '' && grid[newRow][newCol] !== word[i])
      return false;
  }
  return true;
};

const placeWord = (
  grid: string[][],
  word: string,
  row: number,
  col: number,
  direction: [number, number]
): void => {
  for (let i = 0; i < word.length; i++) {
    const newRow = row + direction[0] * i;
    const newCol = col + direction[1] * i;
    grid[newRow][newCol] = word[i];
  }
};

const generateGrid = (
  cols: number,
  rows: number,
  words: string[],
  seed: number = Date.now()
): { grid: string[][]; words: WordObj[] } => {
  console.log('generateGrid called with:', {
    cols,
    rows,
    wordsLength: words?.length,
    seed,
  });
  const grid = Array(rows)
    .fill('')
    .map(() => Array(cols).fill(''));
  const placedWords: WordObj[] = [];
  let currentSeed = seed;

  // Embaralhar palavras e garantir que n√£o se repitam
  const shuffledWords = shuffleArray([...new Set(words)], currentSeed++);

  // Usar apenas palavras √∫nicas
  const uniqueWords = shuffledWords.filter(
    (word, index, arr) => arr.indexOf(word) === index
  );

  for (const word of uniqueWords.slice(0, 15)) {
    let placed = false;
    let attempts = 0;

    while (!placed && attempts < 150) {
      const direction = DIRECTIONS[
        Math.floor(seededRandom(currentSeed++) * DIRECTIONS.length)
      ] as [number, number];
      const startRow = Math.floor(seededRandom(currentSeed++) * rows);
      const startCol = Math.floor(seededRandom(currentSeed++) * cols);

      if (canPlaceWord(grid, word, startRow, startCol, direction, cols, rows)) {
        placeWord(grid, word, startRow, startCol, direction);
        placedWords.push({
          word,
          start: [startRow, startCol],
          direction,
          found: false,
        });
        placed = true;
      }
      attempts++;
    }
  }

  for (let i = 0; i < rows; i++) {
    for (let j = 0; j < cols; j++) {
      if (grid[i][j] === '') {
        grid[i][j] = String.fromCharCode(
          65 + Math.floor(seededRandom(currentSeed++) * 26)
        );
      }
    }
  }

  return { grid, words: placedWords };
};

const getLineCells = (
  startRow: number,
  startCol: number,
  endRow: number,
  endCol: number
): Cell[] => {
  const cells: Cell[] = [];
  const rowStep =
    endRow === startRow ? 0 : (endRow - startRow) / Math.abs(endRow - startRow);
  const colStep =
    endCol === startCol ? 0 : (endCol - startCol) / Math.abs(endCol - startCol);
  const steps = Math.max(
    Math.abs(endRow - startRow),
    Math.abs(endCol - startCol)
  );

  for (let i = 0; i <= steps; i++) {
    cells.push({ row: startRow + rowStep * i, col: startCol + colStep * i });
  }
  return cells;
};

const checkWordMatch = (
  gameState: GameState | null,
  selectedCells: Cell[],
  foundWords: string[]
): WordObj | null => {
  if (!gameState || selectedCells.length < 2) return null;

  const selectedText = selectedCells
    .map(cell => gameState.grid[cell.row][cell.col])
    .join('');
  const reverseText = selectedText.split('').reverse().join('');

  return (
    gameState.words.find(
      wordObj =>
        (wordObj.word === selectedText || wordObj.word === reverseText) &&
        !foundWords.includes(wordObj.word)
    ) || null
  );
};

const getCellClass = (
  row: number,
  col: number,
  selectedCells: Cell[],
  gameState: GameState | null,
  foundWords: string[]
): string => {
  const isSelected = selectedCells.some(
    cell => cell.row === row && cell.col === col
  );
  const isFound = gameState?.words.some(wordObj => {
    if (!foundWords.includes(wordObj.word)) return false;

    for (let i = 0; i < wordObj.word.length; i++) {
      const cellRow = wordObj.start[0] + wordObj.direction[0] * i;
      const cellCol = wordObj.start[1] + wordObj.direction[1] * i;
      if (cellRow === row && cellCol === col) return true;
    }
    return false;
  });

  let classes = 'grid-cell';

  if (isFound) {
    classes += ' grid-cell-found';
  } else if (isSelected) {
    classes += ' grid-cell-selected';
  } else {
    classes += ' grid-cell-default';
  }

  return classes;
};

// ===== CUSTOM HOOKS =====
// TTS DESABILITADO - Fun√ß√£o comentada
/*
const useTTS = (language: string, enabled: boolean) => {
  const speak = useCallback((word: string) => {
    if (!enabled || !('speechSynthesis' in window)) return;
    
    // Cancelar qualquer fala anterior
    speechSynthesis.cancel();
    
    const utterance = new SpeechSynthesisUtterance(word);
    
    // Configura√ß√µes AGGRESSIVAS para melhor qualidade
    utterance.rate = 0.6; // Mais lento para clareza
    utterance.pitch = 1.2; // Tom mais alto para destaque
    utterance.volume = 1.0; // Volume m√°ximo
    
    // Configurar idioma com fallbacks robustos
    const langMap: { [key: string]: string } = {
      'pt': 'pt-BR',
      'en': 'en-US', 
      'es': 'es-ES'
    };
    
    utterance.lang = langMap[language] || 'en-US';
    
    // Fun√ß√£o para selecionar a MELHOR voz dispon√≠vel
    const selectBestVoice = () => {
      const voices = speechSynthesis.getVoices();
      console.log('Available voices:', voices.map(v => `${v.name} (${v.lang})`));
      
      let selectedVoice = null;
      
      // Estrat√©gia 1: Voz nativa de alta qualidade
      selectedVoice = voices.find(voice => 
        voice.lang === langMap[language] && 
        voice.localService &&
        (voice.name.includes('Premium') || voice.name.includes('Enhanced') || voice.name.includes('HD'))
      );
      
      // Estrat√©gia 2: Qualquer voz nativa
      if (!selectedVoice) {
        selectedVoice = voices.find(voice => 
          voice.lang === langMap[language] && voice.localService
        );
      }
      
      // Estrat√©gia 3: Voz do idioma (n√£o necessariamente nativa)
      if (!selectedVoice) {
        selectedVoice = voices.find(voice => 
          voice.lang.startsWith(language) || voice.lang.startsWith(langMap[language])
        );
      }
      
      // Estrat√©gia 4: Voz em ingl√™s de alta qualidade (fallback)
      if (!selectedVoice && language !== 'en') {
        selectedVoice = voices.find(voice => 
          voice.lang.startsWith('en') && 
          (voice.name.includes('Premium') || voice.name.includes('Enhanced') || voice.name.includes('HD'))
        );
      }
      
      // Estrat√©gia 5: Qualquer voz em ingl√™s
      if (!selectedVoice && language !== 'en') {
        selectedVoice = voices.find(voice => voice.lang.startsWith('en'));
      }
      
      // Estrat√©gia 6: Primeira voz dispon√≠vel
      if (!selectedVoice) {
        selectedVoice = voices[0];
      }
      
      if (selectedVoice) {
        utterance.voice = selectedVoice;
        console.log('TTS: Selected voice -', selectedVoice.name, 'for language:', language);
      } else {
        console.warn('TTS: No voice found for language:', language);
      }
      
      // Falar com configura√ß√µes otimizadas
      speechSynthesis.speak(utterance);
    };
    
    // Aguardar vozes carregarem ou usar imediatamente
    if (speechSynthesis.getVoices().length > 0) {
      selectBestVoice();
    } else {
      speechSynthesis.onvoiceschanged = () => {
        selectBestVoice();
        speechSynthesis.onvoiceschanged = null;
      };
    }
    
    // Adicionar handlers para debug
    utterance.onstart = () => console.log('TTS: Started speaking -', word);
    utterance.onend = () => console.log('TTS: Finished speaking -', word);
    utterance.onerror = (event) => console.warn('TTS: Error -', event.error);
    
  }, [enabled, language]);
  
  return { speak };
};
*/

const useGameTimer = (gameStarted: boolean, gameCompleted: boolean) => {
  const [startTime, setStartTime] = useState<number | null>(null);
  const [elapsedTime, setElapsedTime] = useState(0);
  const timerRef = useRef<number | null>(null);

  useEffect(() => {
    if (startTime && gameStarted && !gameCompleted) {
      timerRef.current = setInterval(() => {
        setElapsedTime(Math.floor((Date.now() - startTime) / 1000));
      }, 1000);
    } else {
      if (timerRef.current) clearInterval(timerRef.current);
    }

    return () => {
      if (timerRef.current) clearInterval(timerRef.current);
    };
  }, [startTime, gameStarted, gameCompleted]);

  const startTimer = useCallback(() => {
    if (!startTime) setStartTime(Date.now());
  }, [startTime]);

  const resetTimer = useCallback(() => {
    setStartTime(null);
    setElapsedTime(0);
    if (timerRef.current) clearInterval(timerRef.current);
  }, []);

  return {
    elapsedTime,
    startTime,
    startTimer,
    resetTimer,
    getFormattedTime: () => formatTime(elapsedTime),
  };
};

const useGameState = (
  language: string,
  gridSize: string,
  wordDifficulty: string,
  category: string
) => {
  const [gameState, setGameState] = useState<GameState | null>(null);
  const [foundWords, setFoundWords] = useState<string[]>([]);
  const [gameCompleted, setGameCompleted] = useState(false);
  const [score, setScore] = useState(0);
  const [currentStreak, setCurrentStreak] = useState(0);
  const [gameStats, setGameStats] = useState<GameStats>(() => {
    const saved = localStorage.getItem('wordSearchStats');
    return saved
      ? JSON.parse(saved)
      : {
          totalGames: 0,
          totalWordsFound: 0,
          bestTime: 0,
          averageTime: 0,
          achievements: ACHIEVEMENTS,
          currentStreak: 0,
          longestStreak: 0,
        };
  });

  // Salvar estat√≠sticas no localStorage
  useEffect(() => {
    localStorage.setItem('wordSearchStats', JSON.stringify(gameStats));
  }, [gameStats]);

  const initializeGame = useCallback(() => {
    console.log('Initializing game with:', {
      language,
      gridSize,
      wordDifficulty,
      category,
    });
    try {
      const categoryWords = (WORD_CATALOGS as any)[language]?.[
        wordDifficulty
      ]?.[category];
      console.log('Category words found:', categoryWords?.length);
      console.log('WORD_CATALOGS structure:', {
        hasLanguage: !!WORD_CATALOGS[language as keyof typeof WORD_CATALOGS],
        hasDifficulty:
          !!WORD_CATALOGS[language as keyof typeof WORD_CATALOGS]?.[
            wordDifficulty as keyof typeof WORD_CATALOGS.pt
          ],
        hasCategory: !!(WORD_CATALOGS as any)[language]?.[wordDifficulty]?.[
          category
        ],
      });

      // Detectar se √© mobile ou tablet
      const isMobile = window.innerWidth < 1024; // Inclui tablets (iPad Pro 11" = 834px)
      console.log(
        'Is mobile/tablet:',
        isMobile,
        'Window width:',
        window.innerWidth
      );

      if (!categoryWords?.length) {
        const availableCategories = Object.keys(
          WORD_CATALOGS[language as keyof typeof WORD_CATALOGS]?.[
            wordDifficulty as keyof typeof WORD_CATALOGS.pt
          ] || {}
        );
        if (availableCategories.length > 0) {
          const fallbackCategory = availableCategories[0];
          const fallbackWords = (WORD_CATALOGS as any)[language]?.[
            wordDifficulty
          ]?.[fallbackCategory];

          const config = getGridConfig(gridSize, isMobile);
          const seed = Date.now();
          const result = generateGrid(
            config.size,
            config.rows,
            fallbackWords,
            seed
          );

          setGameState({
            grid: result.grid,
            words: result.words.slice(0, config.wordCount),
            cols: config.size,
            rows: config.rows,
            seed,
          });

          setFoundWords([]);
          setGameCompleted(false);
          setScore(0);
          setCurrentStreak(0);
        }
        return;
      }

      const config = getGridConfig(gridSize, isMobile);
      const seed = Date.now();
      console.log('Generating grid with config:', config);
      const result = generateGrid(
        config.size,
        config.rows,
        categoryWords,
        seed
      );
      console.log(
        'Grid generated successfully:',
        result.grid.length,
        'x',
        result.grid[0]?.length
      );

      setGameState({
        grid: result.grid,
        words: result.words.slice(0, config.wordCount),
        cols: config.size,
        rows: config.rows,
        seed,
      });

      setFoundWords([]);
      setGameCompleted(false);
      setScore(0);
      setCurrentStreak(0);
    } catch (error) {
      console.error('Error initializing game:', error);
    }
  }, [language, gridSize, wordDifficulty, category]);

  // Inicializar jogo apenas uma vez quando o componente monta
  useEffect(() => {
    console.log('useEffect triggered for initializeGame');
    console.log('Component state:', {
      language,
      gridSize,
      wordDifficulty,
      category,
    });
    console.log('Window dimensions:', {
      width: window.innerWidth,
      height: window.innerHeight,
    });
    initializeGame();
  }, []); // Remover depend√™ncias para evitar loop

  useEffect(() => {
    if (
      gameState?.words &&
      foundWords.length === gameState.words.length &&
      gameState.words.length > 0
    ) {
      setGameCompleted(true);
    }
  }, [foundWords, gameState]);

  const addFoundWord = useCallback(
    (word: string) => {
      console.log('addFoundWord called for:', word);
      setFoundWords(prev => {
        if (!prev.includes(word)) {
          console.log('Adding new word:', word);
          // Calcular pontua√ß√£o
          const baseScore = SCORING.wordFound;
          const difficultyMultiplier =
            SCORING.difficultyMultiplier[
              wordDifficulty as keyof typeof SCORING.difficultyMultiplier
            ];
          const streakBonus = currentStreak * SCORING.streakBonus;
          const wordScore = Math.floor(
            (baseScore + streakBonus) * difficultyMultiplier
          );

          setScore(prevScore => prevScore + wordScore);
          setCurrentStreak(prevStreak => prevStreak + 1);

          // Atualizar estat√≠sticas
          setGameStats(prevStats => ({
            ...prevStats,
            totalWordsFound: prevStats.totalWordsFound + 1,
          }));

          return [...prev, word];
        } else {
          console.log('Word already in foundWords:', word);
        }
        return prev;
      });
    },
    [currentStreak, wordDifficulty]
  );

  const checkAchievements = useCallback(() => {
    setGameStats((prev: GameStats) => {
      const newStats = { ...prev };
      const achievements = [...prev.achievements];

      // Primeira palavra
      const firstWord = achievements.find(
        (a: Achievement) => a.id === 'first_word'
      );
      if (firstWord && !firstWord.unlocked) {
        firstWord.progress = 1;
        firstWord.unlocked = true;
        toast.success('üèÜ Conquista: Primeira Palavra!', {
          duration: 3000,
          icon: 'üéØ',
        });
      }

      // Mestre das palavras
      const wordMaster = achievements.find(
        (a: Achievement) => a.id === 'word_master'
      );
      if (wordMaster) {
        wordMaster.progress = Math.min(
          prev.totalWordsFound + 1,
          wordMaster.maxProgress
        );
        if (
          wordMaster.progress >= wordMaster.maxProgress &&
          !wordMaster.unlocked
        ) {
          wordMaster.unlocked = true;
          toast.success('üèÜ Conquista: Mestre das Palavras!', {
            duration: 3000,
            icon: 'üèÜ',
          });
        }
      }

      // Campe√£o da sequ√™ncia
      const streakChampion = achievements.find(
        (a: Achievement) => a.id === 'streak_champion'
      );
      if (streakChampion) {
        streakChampion.progress = Math.max(
          streakChampion.progress,
          currentStreak + 1
        );
        if (
          streakChampion.progress >= streakChampion.maxProgress &&
          !streakChampion.unlocked
        ) {
          streakChampion.unlocked = true;
          toast.success('üèÜ Conquista: Campe√£o da Sequ√™ncia!', {
            duration: 3000,
            icon: 'üî•',
          });
        }
      }

      newStats.achievements = achievements;
      return newStats;
    });
  }, [currentStreak]);

  const updateGameCompletionStats = useCallback(
    (completionTime: number, finalStreak: number) => {
      setGameStats((prev: GameStats) => {
        const newStats = { ...prev };
        newStats.totalGames += 1;

        // Atualizar melhor tempo
        if (
          completionTime > 0 &&
          (newStats.bestTime === 0 || completionTime < newStats.bestTime)
        ) {
          newStats.bestTime = completionTime;
        }

        // Atualizar sequ√™ncia m√°xima
        if (finalStreak > newStats.longestStreak) {
          newStats.longestStreak = finalStreak;
        }

        // Verificar conquista de velocidade
        const speedDemon = newStats.achievements.find(
          (a: Achievement) => a.id === 'speed_demon'
        );
        if (speedDemon && !speedDemon.unlocked && completionTime < 120) {
          // menos de 2 minutos
          speedDemon.unlocked = true;
          toast.success('üèÜ Conquista: Dem√¥nio da Velocidade!', {
            duration: 3000,
            icon: '‚ö°',
          });
        }

        return newStats;
      });
    },
    []
  );

  return {
    gameState,
    foundWords,
    gameCompleted,
    score,
    currentStreak,
    gameStats,
    initializeGame,
    addFoundWord,
    updateGameCompletionStats,
    checkAchievements,
  };
};

const useTouchHandlers = (
  gameCompleted: boolean,
  onCellStart: (row: number, col: number) => void,
  onCellMove: (row: number, col: number) => void,
  onCellEnd: () => void
) => {
  const [isSelecting, setIsSelecting] = useState(false);

  const handleCellStart = useCallback(
    (_row: number, _col: number, e: React.MouseEvent | React.TouchEvent) => {
      e.preventDefault();
      if (gameCompleted) return;
      setIsSelecting(true);
      onCellStart(_row, _col);
    },
    [gameCompleted, onCellStart]
  );

  const handleCellMove = useCallback(
    (_row: number, _col: number, e: React.MouseEvent | React.TouchEvent) => {
      e.preventDefault();
      if (!isSelecting || gameCompleted) return;
      onCellMove(_row, _col);
    },
    [isSelecting, gameCompleted, onCellMove]
  );

  const handleCellEnd = useCallback(
    (e?: React.MouseEvent | React.TouchEvent) => {
      if (e) e.preventDefault();
      if (!isSelecting || gameCompleted) return;

      // Prote√ß√£o adicional contra chamadas duplicadas
      setIsSelecting(false);

      // Chamar onCellEnd com um delay maior para evitar conflitos
      setTimeout(() => {
        onCellEnd();
      }, 50);
    },
    [isSelecting, gameCompleted, onCellEnd]
  );

  const handleTouchMove = useCallback(
    (e: React.TouchEvent) => {
      if (!isSelecting) return;
      e.preventDefault();
      const touch = e.touches[0];
      const element = document.elementFromPoint(touch.clientX, touch.clientY);
      if (
        element &&
        (element as HTMLElement).dataset.row &&
        (element as HTMLElement).dataset.col
      ) {
        const row = parseInt((element as HTMLElement).dataset.row!);
        const col = parseInt((element as HTMLElement).dataset.col!);
        handleCellMove(row, col, e);
      }
    },
    [isSelecting, handleCellMove]
  );

  useEffect(() => {
    const preventDefault = (e: TouchEvent) => {
      if (isSelecting) e.preventDefault();
    };

    document.addEventListener('touchmove', preventDefault, { passive: false });
    document.addEventListener('touchend', () => {
      if (isSelecting) setIsSelecting(false);
    });

    return () => {
      document.removeEventListener('touchmove', preventDefault);
      document.removeEventListener('touchend', () => {});
    };
  }, [isSelecting]);

  return { handleCellStart, handleCellMove, handleCellEnd, handleTouchMove };
};

// ===== MAIN COMPONENT =====
const WordSearchGame: React.FC = () => {
  const navigate = useNavigate();
  const [searchParams] = useSearchParams();
  const { i18n } = useTranslation();

  // Pegar configura√ß√µes da URL ou detectar baseado no subdom√≠nio
  const [language, setLanguage] = useState(
    searchParams.get('lang') || detectLanguageFromSubdomain()
  );

  // Atualizar i18n quando o idioma mudar
  useEffect(() => {
    if (language && ['pt', 'en', 'es'].includes(language)) {
      console.log('WordSearchGame: Setting language to', language);
      i18n.changeLanguage(language);
    } else {
      // Se n√£o h√° idioma na URL, usar o detectado pelo navegador
      const detectedLang = navigator.language.split('-')[0];
      if (detectedLang && ['pt', 'en', 'es'].includes(detectedLang)) {
        console.log('WordSearchGame: Fallback to browser language', detectedLang);
        i18n.changeLanguage(detectedLang);
        setLanguage(detectedLang);
      }
    }
  }, [language, i18n]);
  const [gridSize] = useState(searchParams.get('size') || 'medium');
  const [wordDifficulty] = useState(searchParams.get('difficulty') || 'easy');
  const [category, setCategory] = useState(
    searchParams.get('category') || 'animals'
  );
  const [selectedCells, setSelectedCells] = useState<Cell[]>([]);
  const [gameStarted, setGameStarted] = useState(false);
  const [showConfetti, setShowConfetti] = useState(false);

  const { width, height } = useWindowSize();
  const t = UI_TRANSLATIONS[language as keyof typeof UI_TRANSLATIONS];
  // const { speak } = useTTS(language, ttsEnabled); // TTS desabilitado

  const {
    gameState,
    foundWords,
    gameCompleted,
    score,
    currentStreak,
    gameStats,
    initializeGame,
    addFoundWord,
    updateGameCompletionStats,
    checkAchievements,
  } = useGameState(language, gridSize, wordDifficulty, category);

  const { startTimer, resetTimer, getFormattedTime, startTime } = useGameTimer(
    gameStarted,
    gameCompleted
  );

  // Estado para controlar palavras sendo processadas
  const [processingWords, setProcessingWords] = useState<Set<string>>(
    new Set()
  );
  const [lastProcessedWord, setLastProcessedWord] = useState<string>('');
  const [lastProcessedTime, setLastProcessedTime] = useState<number>(0);

  const handleWordFound = (word: string) => {
    const now = Date.now();

    // Verificar se a palavra j√° foi encontrada
    if (foundWords.includes(word)) {
      console.log('Word already found:', word);
      return;
    }

    // Verificar se a mesma palavra foi processada recentemente (debounce mais agressivo)
    if (word === lastProcessedWord && now - lastProcessedTime < 2000) {
      console.log('Word processed too recently:', word);
      return;
    }

    // Verificar se est√° sendo processada
    if (processingWords.has(word)) {
      console.log('Word being processed:', word);
      return;
    }

    // Marcar palavra como sendo processada
    setProcessingWords(prev => new Set(prev).add(word));
    setLastProcessedWord(word);
    setLastProcessedTime(now);

    // Calcular pontua√ß√£o para o toast
    const baseScore = SCORING.wordFound;
    const difficultyMultiplier =
      SCORING.difficultyMultiplier[
        wordDifficulty as keyof typeof SCORING.difficultyMultiplier
      ];
    const streakBonus = currentStreak * SCORING.streakBonus;
    const wordScore = Math.floor(
      (baseScore + streakBonus) * difficultyMultiplier
    );

    console.log('Processing word:', word, 'with score:', wordScore);

    // Adicionar palavra encontrada
    addFoundWord(word);

    // Feedback visual removido - sem toast de pontua√ß√£o

    // Verificar conquistas ap√≥s um delay maior
    setTimeout(() => {
      checkAchievements();
    }, 500);

    // Track word found
    if (window.gtag) {
      window.gtag('event', 'word_found', {
        word: word,
        game_category: category,
        game_difficulty: wordDifficulty,
        event_category: 'Game',
        event_label: word,
      });
      console.log('Analytics: Word found tracked', {
        word,
        category,
        wordDifficulty,
      });
    }

    // Remover palavra do processamento ap√≥s um delay maior
    setTimeout(() => {
      setProcessingWords(prev => {
        const newSet = new Set(prev);
        newSet.delete(word);
        return newSet;
      });
    }, 2000);
  };

  const onCellStart = (row: number, col: number) => {
    if (!gameStarted) {
      startTimer();
      setGameStarted(true);

      // Track game start
      if (window.gtag) {
        window.gtag('event', 'game_start', {
          game_category: category,
          game_difficulty: wordDifficulty,
          game_language: language,
          event_category: 'Game',
          event_label: `${category}_${wordDifficulty}_${language}`,
        });
        console.log('Analytics: Game start tracked', {
          category,
          wordDifficulty,
          language,
        });
      }
    }
    setSelectedCells([{ row, col }]);
  };

  const onCellMove = (row: number, col: number) => {
    const start = selectedCells[0];
    if (!start) return;

    const rowDiff = row - start.row;
    const colDiff = col - start.col;

    if (
      rowDiff === 0 ||
      colDiff === 0 ||
      Math.abs(rowDiff) === Math.abs(colDiff)
    ) {
      const cells = getLineCells(start.row, start.col, row, col);
      setSelectedCells(cells);
    }
  };

  const onCellEnd = () => {
    // Evitar processamento se n√£o h√° c√©lulas selecionadas
    if (selectedCells.length === 0) {
      console.log('No cells selected');
      return;
    }

    // Prote√ß√£o contra chamadas duplicadas
    const currentSelectedCells = [...selectedCells];

    // Limpar sele√ß√£o imediatamente para evitar chamadas duplicadas
    setSelectedCells([]);

    // Verificar se h√° uma palavra v√°lida
    const foundWord = checkWordMatch(
      gameState,
      currentSelectedCells,
      foundWords
    );

    if (foundWord && foundWord.word) {
      console.log('Found word in onCellEnd:', foundWord.word);
      // Usar setTimeout com delay maior para evitar conflitos
      setTimeout(() => {
        handleWordFound(foundWord.word);
      }, 100);
    } else {
      console.log('No valid word found in selection');
    }
  };

  const { handleCellStart, handleCellMove, handleCellEnd, handleTouchMove } =
    useTouchHandlers(gameCompleted, onCellStart, onCellMove, onCellEnd);

  const resetGameState = () => {
    resetTimer();
    setGameStarted(false);
  };

  const handleNewGame = () => {
    // Aplicar configura√ß√µes tempor√°rias
    // As configura√ß√µes j√° est√£o definidas pelos par√¢metros da URL
    // N√£o √© necess√°rio alterar aqui

    // Reiniciar o jogo com as novas configura√ß√µes
    setTimeout(() => {
      initializeGame();
      resetGameState();
      setSelectedCells([]);
      setShowConfetti(false);
    }, 100);

    // Track settings change
    if (window.gtag) {
      window.gtag('event', 'settings_change', {
        setting_name: 'new_game',
        old_value: 'previous',
        new_value: 'new',
        event_category: 'Settings',
        event_label: 'new_game',
      });
      console.log('Analytics: Settings change tracked', {
        setting: 'new_game',
        oldValue: 'previous',
        newValue: 'new',
      });
    }
  };

  const handleBackToHome = () => {
    navigate('/');
  };

  const handleCloseGame = () => {
    navigate('/game-setup');
  };

  const handleShare = () => {
    if (!gameState) return;

    const gameResult = {
      wordsFound: foundWords.length,
      totalWords: gameState.words.length,
      time: getFormattedTime(),
      score: score,
      streak: currentStreak,
      difficulty: wordDifficulty,
      category: category,
      language: language,
    };

    // Fun√ß√£o para tracking de analytics
    const trackShare = (platform: string) => {
      if (window.gtag) {
        window.gtag('event', 'share', {
          share_platform: platform,
          event_category: 'Social',
          event_label: platform,
          game_category: category,
          game_difficulty: wordDifficulty,
          game_language: language,
        });
        console.log('Analytics: Share tracked', {
          platform,
          category,
          wordDifficulty,
          language,
        });
      }
    };

    // Usar a fun√ß√£o de compartilhamento profissional
    shareGameResult(gameResult, trackShare);
  };

  useEffect(() => {
    const availableCategories = Object.keys(
      WORD_CATALOGS[language as keyof typeof WORD_CATALOGS]?.[
        wordDifficulty as keyof typeof WORD_CATALOGS.pt
      ] || {}
    );
    if (
      !availableCategories.includes(category) &&
      availableCategories.length > 0
    ) {
      setCategory(availableCategories[0]);
    }
  }, [language, wordDifficulty, category, setCategory]);

  useEffect(() => {
    if (gameCompleted) {
      const completionTime = startTime
        ? Math.floor((Date.now() - startTime) / 1000)
        : 0;

      // Atualizar estat√≠sticas finais
      updateGameCompletionStats(completionTime, currentStreak);

      setShowConfetti(true);
      toast.success(
        `üéâ Parab√©ns! Voc√™ completou o puzzle com ${score} pontos!`
      );
      setTimeout(() => setShowConfetti(false), 5000);

      // Track game completion
      if (startTime && window.gtag) {
        window.gtag('event', 'game_complete', {
          game_category: category,
          game_difficulty: wordDifficulty,
          game_language: language,
          words_found: foundWords.length,
          completion_time: completionTime,
          event_category: 'Game',
          event_label: `${category}_${wordDifficulty}_${language}`,
        });
        console.log('Analytics: Game complete tracked', {
          category,
          wordDifficulty,
          language,
          wordsFound: foundWords.length,
          completionTime,
        });
      }
    }
  }, [
    gameCompleted,
    category,
    wordDifficulty,
    language,
    foundWords.length,
    startTime,
    score,
    currentStreak,
    updateGameCompletionStats,
  ]);

  if (!gameState || !gameState.grid) {
    return (
      <div className="flex items-center justify-center min-h-screen bg-gray-50">
        <motion.div
          className="text-center p-8"
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5 }}
        >
          <motion.div
            className="text-4xl mb-4"
            animate={{ rotate: 360 }}
            transition={{ duration: 2, repeat: Infinity, ease: 'linear' }}
          >
            üéØ
          </motion.div>
          <div className="text-xl font-semibold text-gray-700 mb-2">
            Ca√ßa-Palavras
          </div>
          <div className="text-gray-500">Preparando o jogo...</div>
          <div className="mt-4">
            <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-primary-600 mx-auto"></div>
          </div>
        </motion.div>
      </div>
    );
  }

  return (
    <div className="max-w-4xl mx-auto p-4 bg-gray-50 min-h-screen">
      <SEOHead
        pageTitle="üïπÔ∏è Word Search | Educational Games | GSL Game Zone"
        pageDescription="Play the ultimate Word Search game! Find hidden words in the grid with multiple categories, languages and difficulty levels. Educational and fun for all ages."
        pageKeywords="word search game, educational games, puzzle game, vocabulary, brain training, language learning, word puzzle, hidden words"
      />
      {showConfetti && (
        <Confetti width={width} height={height} recycle={false} />
      )}

      <motion.div
        className="card mb-6 md:mb-6 mb-2"
        initial={{ opacity: 0, y: -20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.5 }}
      >
        <div className="flex items-center justify-between mb-4 md:mb-4 mb-1">
          {/* Mobile Header - Simplified */}
          <div className="md:hidden flex items-center justify-between w-full mb-1 h-[60px]">
            <motion.button
              onClick={handleBackToHome}
              className="p-1.5 rounded-lg bg-gray-100 hover:bg-gray-200 transition-colors"
              whileHover={{ scale: 1.05 }}
              whileTap={{ scale: 0.95 }}
              title="Voltar para Home"
            >
              <ArrowLeft size={18} className="text-gray-600" />
            </motion.button>

            <div className="flex items-center gap-2">
              <Target size={16} className="text-blue-600" />
              <h1 className="text-base font-bold text-gray-800">{t.title}</h1>
            </div>

            {gameCompleted && (
              <motion.button
                onClick={handleShare}
                className="p-2 bg-green-500 text-white rounded-lg"
                title={t.share}
                whileHover={{ scale: 1.05 }}
                whileTap={{ scale: 0.95 }}
                initial={{ scale: 0 }}
                animate={{ scale: 1 }}
                transition={{ delay: 0.5 }}
              >
                <Share2 size={18} />
              </motion.button>
            )}
          </div>

          {/* Desktop Header */}
          <div className="hidden md:flex items-center gap-3">
            <motion.button
              onClick={handleBackToHome}
              className="p-2 rounded-lg bg-gray-100 hover:bg-gray-200 transition-colors"
              whileHover={{ scale: 1.05 }}
              whileTap={{ scale: 0.95 }}
              title="Voltar para Home"
            >
              <ArrowLeft size={20} className="text-gray-600" />
            </motion.button>
            <div className="p-2 bg-gradient-to-br from-blue-500 to-indigo-600 rounded-lg shadow-lg">
              <Target className="text-white" size={24} />
            </div>
            <div>
              <h1 className="text-2xl font-bold bg-gradient-to-r from-gray-800 to-blue-600 bg-clip-text text-transparent">
                {t.title}
              </h1>
              <p className="text-xs text-gray-500 mt-1">
                Jogo educativo interativo
              </p>
            </div>
          </div>

          <div className="flex gap-3">
            {gameCompleted && (
              <motion.button
                onClick={handleShare}
                className="p-3 bg-gradient-to-r from-green-500 to-emerald-600 text-white rounded-xl shadow-sm hover:shadow-lg transition-all duration-200"
                title={t.share}
                whileHover={{ scale: 1.05, y: -2 }}
                whileTap={{ scale: 0.95 }}
                initial={{ scale: 0, rotate: -180 }}
                animate={{ scale: 1, rotate: 0 }}
                transition={{ delay: 0.5, type: 'spring' }}
              >
                <Share2 size={20} />
              </motion.button>
            )}
          </div>
        </div>

        <div className="hidden md:block bg-gradient-to-r from-gray-50 to-blue-50 rounded-lg p-4 border border-gray-200">
          <div className="flex flex-wrap items-center justify-between gap-4 text-sm">
            {/* Progresso e Pontua√ß√£o */}
            <div className="flex items-center gap-3">
              <div className="flex items-center gap-2 bg-white px-3 py-2 rounded-lg shadow-sm border">
                <Trophy size={18} className="text-yellow-500" />
                <span className="font-semibold text-gray-800">
                  {t.found}:{' '}
                  <span className="text-blue-600">{foundWords.length}</span>/
                  <span className="text-gray-600">
                    {gameState.words.length}
                  </span>
                </span>
              </div>

              {/* Pontua√ß√£o */}
              <div className="flex items-center gap-2 bg-gradient-to-r from-yellow-100 to-orange-100 px-3 py-2 rounded-lg shadow-sm border border-yellow-200">
                <Zap size={18} className="text-yellow-600" />
                <span className="font-semibold text-gray-800">
                  <span className="text-yellow-700">{score}</span> pts
                </span>
              </div>

              {/* Sequ√™ncia */}
              {currentStreak > 0 && (
                <div className="flex items-center gap-2 bg-gradient-to-r from-red-100 to-pink-100 px-3 py-2 rounded-lg shadow-sm border border-red-200">
                  <span className="text-lg">üî•</span>
                  <span className="font-semibold text-gray-800">
                    <span className="text-red-700">{currentStreak}</span> seq
                  </span>
                </div>
              )}

              {/* Timer */}
              <div className="flex items-center gap-2 bg-white px-3 py-2 rounded-lg shadow-sm border">
                <Clock size={18} className="text-green-500" />
                <span
                  className={`font-semibold ${
                    gameStarted ? 'text-green-600' : 'text-gray-500'
                  }`}
                >
                  {getFormattedTime()}
                </span>
                {!gameStarted && width < 1024 && (
                  <span className="text-xs text-gray-400 bg-gray-100 px-2 py-1 rounded">
                    ({t.clickToStart})
                  </span>
                )}
              </div>
            </div>

            {/* Configura√ß√£o atual */}
            <div className="flex items-center gap-2 text-xs">
              <span className="text-gray-500">üéÆ</span>
              <div className="flex flex-wrap gap-1">
                <span className="bg-blue-100 text-blue-800 px-2 py-1 rounded-full font-medium">
                  {t.categories[category as keyof typeof t.categories] ||
                    category}
                </span>
                <span className="bg-green-100 text-green-800 px-2 py-1 rounded-full font-medium">
                  {t.gridSizes[gridSize as keyof typeof t.gridSizes]}
                </span>
                <span className="bg-purple-100 text-purple-800 px-2 py-1 rounded-full font-medium">
                  {
                    t.wordDifficulties[
                      wordDifficulty as keyof typeof t.wordDifficulties
                    ]
                  }
                </span>
              </div>
            </div>
          </div>
        </div>
      </motion.div>

      <div className="grid grid-cols-1 xl:grid-cols-4 gap-6">
        <div className="xl:col-span-3">
          <motion.div
            className="card game-area"
            initial={{ opacity: 0, scale: 0.95 }}
            animate={{ opacity: 1, scale: 1 }}
            transition={{ duration: 0.5, delay: 0.2 }}
          >
            <div
              className="grid gap-1 mx-auto"
              style={{
                gridTemplateColumns: `repeat(${gameState.cols}, 1fr)`,
                maxWidth: `${gameState.cols * 2.5}rem`,
              }}
              onMouseLeave={() => setSelectedCells([])}
              onTouchMove={handleTouchMove}
              onTouchEnd={handleCellEnd}
            >
              {gameState.grid.map((row, rowIndex) =>
                row.map((cell, colIndex) => (
                  <motion.div
                    key={`${rowIndex}-${colIndex}`}
                    className={getCellClass(
                      rowIndex,
                      colIndex,
                      selectedCells,
                      gameState,
                      foundWords
                    )}
                    data-row={rowIndex}
                    data-col={colIndex}
                    onMouseDown={e => handleCellStart(rowIndex, colIndex, e)}
                    onMouseEnter={e => handleCellMove(rowIndex, colIndex, e)}
                    onMouseUp={handleCellEnd}
                    onTouchStart={e => handleCellStart(rowIndex, colIndex, e)}
                    style={{ touchAction: 'none', userSelect: 'none' }}
                    whileHover={{ scale: 1.05 }}
                    whileTap={{ scale: 0.95 }}
                  >
                    {cell}
                  </motion.div>
                ))
              )}
            </div>
          </motion.div>

          {/* Estat√≠sticas e Conquistas - Desktop (abaixo do grid) */}
          <div className="hidden xl:grid xl:grid-cols-2 gap-6 mt-6">
            {/* Estat√≠sticas */}
            <motion.div
              className="card"
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.5, delay: 0.4 }}
            >
              <h3 className="text-lg font-semibold text-gray-800 mb-4 flex items-center gap-2">
                <TrendingUp className="text-blue-500" />
                {t.statistics}
              </h3>
              <div className="space-y-3">
                <div className="flex justify-between items-center p-2 bg-blue-50 rounded-lg">
                  <span className="text-sm text-gray-600">{t.totalGames}:</span>
                  <span className="font-semibold text-blue-700">
                    {gameStats.totalGames}
                  </span>
                </div>
                <div className="flex justify-between items-center p-2 bg-green-50 rounded-lg">
                  <span className="text-sm text-gray-600">{t.wordsFound}:</span>
                  <span className="font-semibold text-green-700">
                    {gameStats.totalWordsFound}
                  </span>
                </div>
                <div className="flex justify-between items-center p-2 bg-purple-50 rounded-lg">
                  <span className="text-sm text-gray-600">{t.bestTime}:</span>
                  <span className="font-semibold text-purple-700">
                    {gameStats.bestTime > 0
                      ? formatTime(gameStats.bestTime)
                      : '--:--'}
                  </span>
                </div>
                <div className="flex justify-between items-center p-2 bg-orange-50 rounded-lg">
                  <span className="text-sm text-gray-600">{t.maxStreak}:</span>
                  <span className="font-semibold text-orange-700">
                    {gameStats.longestStreak}
                  </span>
                </div>
              </div>
            </motion.div>

            {/* Conquistas */}
            <motion.div
              className="card"
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.5, delay: 0.5 }}
            >
              <h3 className="text-lg font-semibold text-gray-800 mb-4 flex items-center gap-2">
                <Award className="text-yellow-500" />
                {t.achievements}
              </h3>
              <div className="space-y-2">
                {gameStats.achievements
                  .slice(0, 3)
                  .map((achievement, index) => (
                    <motion.div
                      key={achievement.id}
                      className={`p-2 rounded-lg text-sm transition-all ${
                        achievement.unlocked
                          ? 'bg-yellow-100 text-yellow-800 border border-yellow-200'
                          : 'bg-gray-100 text-gray-500'
                      }`}
                      initial={{ opacity: 0, x: -10 }}
                      animate={{ opacity: 1, x: 0 }}
                      transition={{ delay: index * 0.1 }}
                    >
                      <div className="flex items-center gap-2">
                        <span className="text-lg">{achievement.icon}</span>
                        <div className="flex-1">
                          <div className="font-medium">{achievement.name}</div>
                          <div className="text-xs opacity-75">
                            {achievement.description}
                          </div>
                        </div>
                        {achievement.unlocked && (
                          <span className="text-yellow-600">‚úì</span>
                        )}
                      </div>
                      {!achievement.unlocked && achievement.maxProgress > 1 && (
                        <div className="mt-1">
                          <div className="w-full bg-gray-200 rounded-full h-1">
                            <div
                              className="bg-yellow-400 h-1 rounded-full transition-all duration-300"
                              style={{
                                width: `${
                                  (achievement.progress /
                                    achievement.maxProgress) *
                                  100
                                }%`,
                              }}
                            />
                          </div>
                          <div className="text-xs text-gray-500 mt-1">
                            {achievement.progress}/{achievement.maxProgress}
                          </div>
                        </div>
                      )}
                    </motion.div>
                  ))}
                {gameStats.achievements.filter(a => a.unlocked).length > 3 && (
                  <div className="text-center text-sm text-gray-500 mt-2">
                    +{gameStats.achievements.filter(a => a.unlocked).length - 3}{' '}
                    {t.moreAchievements}
                  </div>
                )}
              </div>
            </motion.div>
          </div>
        </div>

        <div className="xl:col-span-1 space-y-4">
          {/* Lista de Palavras */}
          <motion.div
            className="card"
            initial={{ opacity: 0, x: 20 }}
            animate={{ opacity: 1, x: 0 }}
            transition={{ duration: 0.5, delay: 0.3 }}
          >
            <h3 className="text-lg font-semibold text-gray-800 mb-4 flex items-center gap-2">
              <Star className="text-yellow-500" />
              {t.categories[category as keyof typeof t.categories] || category}
            </h3>
            <div className="space-y-2">
              {gameState.words.map((wordObj, index) => (
                <motion.div
                  key={index}
                  className={`p-2 rounded-lg text-xs font-medium transition-colors ${
                    foundWords.includes(wordObj.word)
                      ? 'bg-success-100 text-success-800 line-through'
                      : 'bg-gray-100 text-gray-700'
                  }`}
                  initial={{ opacity: 0, x: -10 }}
                  animate={{ opacity: 1, x: 0 }}
                  transition={{ delay: index * 0.1 }}
                >
                  {wordObj.word}
                </motion.div>
              ))}
            </div>
          </motion.div>

          {/* Estat√≠sticas - Mobile/Tablet (lado direito) */}
          <motion.div
            className="card xl:hidden"
            initial={{ opacity: 0, x: 20 }}
            animate={{ opacity: 1, x: 0 }}
            transition={{ duration: 0.5, delay: 0.4 }}
          >
            <h3 className="text-lg font-semibold text-gray-800 mb-4 flex items-center gap-2">
              <TrendingUp className="text-blue-500" />
              {t.statistics}
            </h3>
            <div className="space-y-3">
              <div className="flex justify-between items-center p-2 bg-blue-50 rounded-lg">
                <span className="text-sm text-gray-600">{t.totalGames}:</span>
                <span className="font-semibold text-blue-700">
                  {gameStats.totalGames}
                </span>
              </div>
              <div className="flex justify-between items-center p-2 bg-green-50 rounded-lg">
                <span className="text-sm text-gray-600">{t.wordsFound}:</span>
                <span className="font-semibold text-green-700">
                  {gameStats.totalWordsFound}
                </span>
              </div>
              <div className="flex justify-between items-center p-2 bg-purple-50 rounded-lg">
                <span className="text-sm text-gray-600">{t.bestTime}:</span>
                <span className="font-semibold text-purple-700">
                  {gameStats.bestTime > 0
                    ? formatTime(gameStats.bestTime)
                    : '--:--'}
                </span>
              </div>
              <div className="flex justify-between items-center p-2 bg-orange-50 rounded-lg">
                <span className="text-sm text-gray-600">{t.maxStreak}:</span>
                <span className="font-semibold text-orange-700">
                  {gameStats.longestStreak}
                </span>
              </div>
            </div>
          </motion.div>

          {/* Conquistas - Mobile/Tablet (lado direito) */}
          <motion.div
            className="card xl:hidden"
            initial={{ opacity: 0, x: 20 }}
            animate={{ opacity: 1, x: 0 }}
            transition={{ duration: 0.5, delay: 0.5 }}
          >
            <h3 className="text-lg font-semibold text-gray-800 mb-4 flex items-center gap-2">
              <Award className="text-yellow-500" />
              {t.achievements}
            </h3>
            <div className="space-y-2">
              {gameStats.achievements.slice(0, 3).map((achievement, index) => (
                <motion.div
                  key={achievement.id}
                  className={`p-2 rounded-lg text-sm transition-all ${
                    achievement.unlocked
                      ? 'bg-yellow-100 text-yellow-800 border border-yellow-200'
                      : 'bg-gray-100 text-gray-500'
                  }`}
                  initial={{ opacity: 0, x: -10 }}
                  animate={{ opacity: 1, x: 0 }}
                  transition={{ delay: index * 0.1 }}
                >
                  <div className="flex items-center gap-2">
                    <span className="text-lg">{achievement.icon}</span>
                    <div className="flex-1">
                      <div className="font-medium">{achievement.name}</div>
                      <div className="text-xs opacity-75">
                        {achievement.description}
                      </div>
                    </div>
                    {achievement.unlocked && (
                      <span className="text-yellow-600">‚úì</span>
                    )}
                  </div>
                  {!achievement.unlocked && achievement.maxProgress > 1 && (
                    <div className="mt-1">
                      <div className="w-full bg-gray-200 rounded-full h-1">
                        <div
                          className="bg-yellow-400 h-1 rounded-full transition-all duration-300"
                          style={{
                            width: `${
                              (achievement.progress / achievement.maxProgress) *
                              100
                            }%`,
                          }}
                        />
                      </div>
                      <div className="text-xs text-gray-500 mt-1">
                        {achievement.progress}/{achievement.maxProgress}
                      </div>
                    </div>
                  )}
                </motion.div>
              ))}
              {gameStats.achievements.filter(a => a.unlocked).length > 3 && (
                <div className="text-center text-sm text-gray-500 mt-2">
                  +{gameStats.achievements.filter(a => a.unlocked).length - 3}{' '}
                  {t.moreAchievements}
                </div>
              )}
            </div>
          </motion.div>
        </div>
      </div>

      <AnimatePresence>
        {gameCompleted && (
          <motion.div
            className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50"
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
          >
            <motion.div
              className="bg-white rounded-lg p-8 max-w-md w-full mx-4 relative"
              initial={{ scale: 0.8, y: 50 }}
              animate={{ scale: 1, y: 0 }}
              exit={{ scale: 0.8, y: 50 }}
              transition={{ type: 'spring', damping: 25, stiffness: 300 }}
            >
              {/* Bot√£o Fechar */}
              <button
                onClick={handleCloseGame}
                className="absolute top-4 right-4 p-2 rounded-full bg-gray-100 hover:bg-gray-200 transition-colors"
                title="Fechar"
              >
                <X size={20} className="text-gray-600" />
              </button>

              <div className="text-center">
                <motion.div
                  className="text-6xl mb-4"
                  animate={{ rotate: [0, -10, 10, 0] }}
                  transition={{ duration: 0.6, repeat: 2 }}
                >
                  üéâ
                </motion.div>
                <h2 className="text-2xl font-bold text-gray-800 mb-2">
                  {t.congratulations}
                </h2>
                <p className="text-gray-600 mb-4">{t.gameCompleted}</p>
                <div className="bg-gray-50 rounded-lg p-4 mb-6">
                  <div className="text-sm text-gray-600 space-y-1">
                    <div className="flex justify-between">
                      <span>Pontua√ß√£o Final:</span>
                      <span className="font-bold text-yellow-600">
                        {score} pts
                      </span>
                    </div>
                    <div className="flex justify-between">
                      <span>Palavras Encontradas:</span>
                      <span>
                        {foundWords.length}/{gameState.words.length}
                      </span>
                    </div>
                    <div className="flex justify-between">
                      <span>Tempo:</span>
                      <span>{getFormattedTime()}</span>
                    </div>
                    <div className="flex justify-between">
                      <span>Sequ√™ncia M√°xima:</span>
                      <span className="text-red-600">{currentStreak}</span>
                    </div>
                    <div className="flex justify-between">
                      <span>Dificuldade:</span>
                      <span>
                        {
                          t.wordDifficulties[
                            wordDifficulty as keyof typeof t.wordDifficulties
                          ]
                        }
                      </span>
                    </div>
                  </div>
                </div>
                <div className="flex gap-3">
                  <motion.button
                    onClick={handleNewGame}
                    className="flex-1 btn-primary"
                    whileHover={{ scale: 1.02 }}
                    whileTap={{ scale: 0.98 }}
                  >
                    {t.newGame}
                  </motion.button>
                  <motion.button
                    onClick={handleShare}
                    className="flex-1 bg-success-600 text-white px-4 py-2 rounded-lg hover:bg-success-700 transition-colors"
                    whileHover={{ scale: 1.02 }}
                    whileTap={{ scale: 0.98 }}
                  >
                    {t.share}
                  </motion.button>
                </div>
              </div>
            </motion.div>
          </motion.div>
        )}
      </AnimatePresence>
    </div>
  );
};

export default WordSearchGame;
